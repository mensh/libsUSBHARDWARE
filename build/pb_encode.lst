ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"pb_encode.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.buf_write,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	buf_write:
  24              	.LVL0:
  25              	.LFB0:
  26              		.file 1 "nanopb/pb_encode.c"
   1:nanopb/pb_encode.c **** /* pb_encode.c -- encode a protobuf using minimal resources
   2:nanopb/pb_encode.c ****  *
   3:nanopb/pb_encode.c ****  * 2011 Petteri Aimonen <jpa@kapsi.fi>
   4:nanopb/pb_encode.c ****  */
   5:nanopb/pb_encode.c **** 
   6:nanopb/pb_encode.c **** #include "pb.h"
   7:nanopb/pb_encode.c **** #include "pb_encode.h"
   8:nanopb/pb_encode.c **** #include "pb_common.h"
   9:nanopb/pb_encode.c **** 
  10:nanopb/pb_encode.c **** /* Use the GCC warn_unused_result attribute to check that all return values
  11:nanopb/pb_encode.c ****  * are propagated correctly. On other compilers and gcc before 3.4.0 just
  12:nanopb/pb_encode.c ****  * ignore the annotation.
  13:nanopb/pb_encode.c ****  */
  14:nanopb/pb_encode.c **** #if !defined(__GNUC__) || ( __GNUC__ < 3) || (__GNUC__ == 3 && __GNUC_MINOR__ < 4)
  15:nanopb/pb_encode.c ****     #define checkreturn
  16:nanopb/pb_encode.c **** #else
  17:nanopb/pb_encode.c ****     #define checkreturn __attribute__((warn_unused_result))
  18:nanopb/pb_encode.c **** #endif
  19:nanopb/pb_encode.c **** 
  20:nanopb/pb_encode.c **** /**************************************
  21:nanopb/pb_encode.c ****  * Declarations internal to this file *
  22:nanopb/pb_encode.c ****  **************************************/
  23:nanopb/pb_encode.c **** typedef bool (*pb_encoder_t)(pb_ostream_t *stream, const pb_field_t *field, const void *src) checkr
  24:nanopb/pb_encode.c **** 
  25:nanopb/pb_encode.c **** static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count);
  26:nanopb/pb_encode.c **** static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field, const void *pDa
  27:nanopb/pb_encode.c **** static bool checkreturn encode_field(pb_ostream_t *stream, const pb_field_t *field, const void *pDa
  28:nanopb/pb_encode.c **** static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *exten
  29:nanopb/pb_encode.c **** static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_t *field, const
  30:nanopb/pb_encode.c **** static void *pb_const_cast(const void *p);
  31:nanopb/pb_encode.c **** static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *sr
  32:nanopb/pb_encode.c **** static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *s
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 2


  33:nanopb/pb_encode.c **** static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *s
  34:nanopb/pb_encode.c **** static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *s
  35:nanopb/pb_encode.c **** static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *s
  36:nanopb/pb_encode.c **** static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src
  37:nanopb/pb_encode.c **** static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *sr
  38:nanopb/pb_encode.c **** static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void
  39:nanopb/pb_encode.c **** static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, co
  40:nanopb/pb_encode.c **** 
  41:nanopb/pb_encode.c **** #ifdef PB_WITHOUT_64BIT
  42:nanopb/pb_encode.c **** #define pb_int64_t int32_t
  43:nanopb/pb_encode.c **** #define pb_uint64_t uint32_t
  44:nanopb/pb_encode.c **** #else
  45:nanopb/pb_encode.c **** #define pb_int64_t int64_t
  46:nanopb/pb_encode.c **** #define pb_uint64_t uint64_t
  47:nanopb/pb_encode.c **** #endif
  48:nanopb/pb_encode.c **** 
  49:nanopb/pb_encode.c **** /* --- Function pointers to field encoders ---
  50:nanopb/pb_encode.c ****  * Order in the array must match pb_action_t LTYPE numbering.
  51:nanopb/pb_encode.c ****  */
  52:nanopb/pb_encode.c **** static const pb_encoder_t PB_ENCODERS[PB_LTYPES_COUNT] = {
  53:nanopb/pb_encode.c ****     &pb_enc_varint,
  54:nanopb/pb_encode.c ****     &pb_enc_uvarint,
  55:nanopb/pb_encode.c ****     &pb_enc_svarint,
  56:nanopb/pb_encode.c ****     &pb_enc_fixed32,
  57:nanopb/pb_encode.c ****     &pb_enc_fixed64,
  58:nanopb/pb_encode.c ****     
  59:nanopb/pb_encode.c ****     &pb_enc_bytes,
  60:nanopb/pb_encode.c ****     &pb_enc_string,
  61:nanopb/pb_encode.c ****     &pb_enc_submessage,
  62:nanopb/pb_encode.c ****     NULL, /* extensions */
  63:nanopb/pb_encode.c ****     &pb_enc_fixed_length_bytes
  64:nanopb/pb_encode.c **** };
  65:nanopb/pb_encode.c **** 
  66:nanopb/pb_encode.c **** /*******************************
  67:nanopb/pb_encode.c ****  * pb_ostream_t implementation *
  68:nanopb/pb_encode.c ****  *******************************/
  69:nanopb/pb_encode.c **** 
  70:nanopb/pb_encode.c **** static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
  71:nanopb/pb_encode.c **** {
  27              		.loc 1 71 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              		.loc 1 71 1 is_stmt 0 view .LVU1
  33 0000 10B4     		push	{r4}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 4, -4
  72:nanopb/pb_encode.c ****     size_t i;
  37              		.loc 1 72 5 is_stmt 1 view .LVU2
  73:nanopb/pb_encode.c ****     pb_byte_t *dest = (pb_byte_t*)stream->state;
  38              		.loc 1 73 5 view .LVU3
  39              		.loc 1 73 16 is_stmt 0 view .LVU4
  40 0002 4468     		ldr	r4, [r0, #4]
  41              	.LVL1:
  74:nanopb/pb_encode.c ****     stream->state = dest + count;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 3


  42              		.loc 1 74 5 is_stmt 1 view .LVU5
  43              		.loc 1 74 26 is_stmt 0 view .LVU6
  44 0004 A318     		adds	r3, r4, r2
  45              		.loc 1 74 19 view .LVU7
  46 0006 4360     		str	r3, [r0, #4]
  75:nanopb/pb_encode.c ****     
  76:nanopb/pb_encode.c ****     for (i = 0; i < count; i++)
  47              		.loc 1 76 5 is_stmt 1 view .LVU8
  48              	.LVL2:
  49              		.loc 1 76 12 is_stmt 0 view .LVU9
  50 0008 0023     		movs	r3, #0
  51              	.LVL3:
  52              	.L2:
  53              		.loc 1 76 5 discriminator 1 view .LVU10
  54 000a 9342     		cmp	r3, r2
  55 000c 03D2     		bcs	.L5
  77:nanopb/pb_encode.c ****         dest[i] = buf[i];
  56              		.loc 1 77 9 is_stmt 1 discriminator 3 view .LVU11
  57              		.loc 1 77 22 is_stmt 0 discriminator 3 view .LVU12
  58 000e C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
  59              		.loc 1 77 17 discriminator 3 view .LVU13
  60 0010 E054     		strb	r0, [r4, r3]
  76:nanopb/pb_encode.c ****         dest[i] = buf[i];
  61              		.loc 1 76 29 discriminator 3 view .LVU14
  62 0012 0133     		adds	r3, r3, #1
  63              	.LVL4:
  76:nanopb/pb_encode.c ****         dest[i] = buf[i];
  64              		.loc 1 76 29 discriminator 3 view .LVU15
  65 0014 F9E7     		b	.L2
  66              	.L5:
  78:nanopb/pb_encode.c ****     
  79:nanopb/pb_encode.c ****     return true;
  67              		.loc 1 79 5 is_stmt 1 view .LVU16
  80:nanopb/pb_encode.c **** }
  68              		.loc 1 80 1 is_stmt 0 view .LVU17
  69 0016 0120     		movs	r0, #1
  70 0018 10BC     		pop	{r4}
  71              	.LCFI1:
  72              		.cfi_restore 4
  73              		.cfi_def_cfa_offset 0
  74              	.LVL5:
  75              		.loc 1 80 1 view .LVU18
  76 001a 7047     		bx	lr
  77              		.cfi_endproc
  78              	.LFE0:
  80              		.section	.text.encode_callback_field,"ax",%progbits
  81              		.align	1
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  85              		.fpu softvfp
  87              	encode_callback_field:
  88              	.LVL6:
  89              	.LFB6:
  81:nanopb/pb_encode.c **** 
  82:nanopb/pb_encode.c **** pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
  83:nanopb/pb_encode.c **** {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 4


  84:nanopb/pb_encode.c ****     pb_ostream_t stream;
  85:nanopb/pb_encode.c **** #ifdef PB_BUFFER_ONLY
  86:nanopb/pb_encode.c ****     stream.callback = (void*)1; /* Just a marker value */
  87:nanopb/pb_encode.c **** #else
  88:nanopb/pb_encode.c ****     stream.callback = &buf_write;
  89:nanopb/pb_encode.c **** #endif
  90:nanopb/pb_encode.c ****     stream.state = buf;
  91:nanopb/pb_encode.c ****     stream.max_size = bufsize;
  92:nanopb/pb_encode.c ****     stream.bytes_written = 0;
  93:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
  94:nanopb/pb_encode.c ****     stream.errmsg = NULL;
  95:nanopb/pb_encode.c **** #endif
  96:nanopb/pb_encode.c ****     return stream;
  97:nanopb/pb_encode.c **** }
  98:nanopb/pb_encode.c **** 
  99:nanopb/pb_encode.c **** bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
 100:nanopb/pb_encode.c **** {
 101:nanopb/pb_encode.c ****     if (stream->callback != NULL)
 102:nanopb/pb_encode.c ****     {
 103:nanopb/pb_encode.c ****         if (stream->bytes_written + count > stream->max_size)
 104:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "stream full");
 105:nanopb/pb_encode.c **** 
 106:nanopb/pb_encode.c **** #ifdef PB_BUFFER_ONLY
 107:nanopb/pb_encode.c ****         if (!buf_write(stream, buf, count))
 108:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "io error");
 109:nanopb/pb_encode.c **** #else        
 110:nanopb/pb_encode.c ****         if (!stream->callback(stream, buf, count))
 111:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "io error");
 112:nanopb/pb_encode.c **** #endif
 113:nanopb/pb_encode.c ****     }
 114:nanopb/pb_encode.c ****     
 115:nanopb/pb_encode.c ****     stream->bytes_written += count;
 116:nanopb/pb_encode.c ****     return true;
 117:nanopb/pb_encode.c **** }
 118:nanopb/pb_encode.c **** 
 119:nanopb/pb_encode.c **** /*************************
 120:nanopb/pb_encode.c ****  * Encode a single field *
 121:nanopb/pb_encode.c ****  *************************/
 122:nanopb/pb_encode.c **** 
 123:nanopb/pb_encode.c **** /* Encode a static array. Handles the size calculations and possible packing. */
 124:nanopb/pb_encode.c **** static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
 125:nanopb/pb_encode.c ****                          const void *pData, size_t count, pb_encoder_t func)
 126:nanopb/pb_encode.c **** {
 127:nanopb/pb_encode.c ****     size_t i;
 128:nanopb/pb_encode.c ****     const void *p;
 129:nanopb/pb_encode.c ****     size_t size;
 130:nanopb/pb_encode.c ****     
 131:nanopb/pb_encode.c ****     if (count == 0)
 132:nanopb/pb_encode.c ****         return true;
 133:nanopb/pb_encode.c **** 
 134:nanopb/pb_encode.c ****     if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 135:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
 136:nanopb/pb_encode.c ****     
 137:nanopb/pb_encode.c ****     /* We always pack arrays if the datatype allows it. */
 138:nanopb/pb_encode.c ****     if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 139:nanopb/pb_encode.c ****     {
 140:nanopb/pb_encode.c ****         if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 5


 141:nanopb/pb_encode.c ****             return false;
 142:nanopb/pb_encode.c ****         
 143:nanopb/pb_encode.c ****         /* Determine the total size of packed array. */
 144:nanopb/pb_encode.c ****         if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 145:nanopb/pb_encode.c ****         {
 146:nanopb/pb_encode.c ****             size = 4 * count;
 147:nanopb/pb_encode.c ****         }
 148:nanopb/pb_encode.c ****         else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 149:nanopb/pb_encode.c ****         {
 150:nanopb/pb_encode.c ****             size = 8 * count;
 151:nanopb/pb_encode.c ****         }
 152:nanopb/pb_encode.c ****         else
 153:nanopb/pb_encode.c ****         { 
 154:nanopb/pb_encode.c ****             pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 155:nanopb/pb_encode.c ****             p = pData;
 156:nanopb/pb_encode.c ****             for (i = 0; i < count; i++)
 157:nanopb/pb_encode.c ****             {
 158:nanopb/pb_encode.c ****                 if (!func(&sizestream, field, p))
 159:nanopb/pb_encode.c ****                     return false;
 160:nanopb/pb_encode.c ****                 p = (const char*)p + field->data_size;
 161:nanopb/pb_encode.c ****             }
 162:nanopb/pb_encode.c ****             size = sizestream.bytes_written;
 163:nanopb/pb_encode.c ****         }
 164:nanopb/pb_encode.c ****         
 165:nanopb/pb_encode.c ****         if (!pb_encode_varint(stream, (pb_uint64_t)size))
 166:nanopb/pb_encode.c ****             return false;
 167:nanopb/pb_encode.c ****         
 168:nanopb/pb_encode.c ****         if (stream->callback == NULL)
 169:nanopb/pb_encode.c ****             return pb_write(stream, NULL, size); /* Just sizing.. */
 170:nanopb/pb_encode.c ****         
 171:nanopb/pb_encode.c ****         /* Write the data */
 172:nanopb/pb_encode.c ****         p = pData;
 173:nanopb/pb_encode.c ****         for (i = 0; i < count; i++)
 174:nanopb/pb_encode.c ****         {
 175:nanopb/pb_encode.c ****             if (!func(stream, field, p))
 176:nanopb/pb_encode.c ****                 return false;
 177:nanopb/pb_encode.c ****             p = (const char*)p + field->data_size;
 178:nanopb/pb_encode.c ****         }
 179:nanopb/pb_encode.c ****     }
 180:nanopb/pb_encode.c ****     else
 181:nanopb/pb_encode.c ****     {
 182:nanopb/pb_encode.c ****         p = pData;
 183:nanopb/pb_encode.c ****         for (i = 0; i < count; i++)
 184:nanopb/pb_encode.c ****         {
 185:nanopb/pb_encode.c ****             if (!pb_encode_tag_for_field(stream, field))
 186:nanopb/pb_encode.c ****                 return false;
 187:nanopb/pb_encode.c **** 
 188:nanopb/pb_encode.c ****             /* Normally the data is stored directly in the array entries, but
 189:nanopb/pb_encode.c ****              * for pointer-type string and bytes fields, the array entries are
 190:nanopb/pb_encode.c ****              * actually pointers themselves also. So we have to dereference once
 191:nanopb/pb_encode.c ****              * more to get to the actual data. */
 192:nanopb/pb_encode.c ****             if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 193:nanopb/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 194:nanopb/pb_encode.c ****                  PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 195:nanopb/pb_encode.c ****             {
 196:nanopb/pb_encode.c ****                 if (!func(stream, field, *(const void* const*)p))
 197:nanopb/pb_encode.c ****                     return false;      
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 6


 198:nanopb/pb_encode.c ****             }
 199:nanopb/pb_encode.c ****             else
 200:nanopb/pb_encode.c ****             {
 201:nanopb/pb_encode.c ****                 if (!func(stream, field, p))
 202:nanopb/pb_encode.c ****                     return false;
 203:nanopb/pb_encode.c ****             }
 204:nanopb/pb_encode.c ****             p = (const char*)p + field->data_size;
 205:nanopb/pb_encode.c ****         }
 206:nanopb/pb_encode.c ****     }
 207:nanopb/pb_encode.c ****     
 208:nanopb/pb_encode.c ****     return true;
 209:nanopb/pb_encode.c **** }
 210:nanopb/pb_encode.c **** 
 211:nanopb/pb_encode.c **** /* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 212:nanopb/pb_encode.c ****  * This function implements the check for the zero value. */
 213:nanopb/pb_encode.c **** static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
 214:nanopb/pb_encode.c **** {
 215:nanopb/pb_encode.c ****     pb_type_t type = field->type;
 216:nanopb/pb_encode.c ****     const void *pSize = (const char*)pData + field->size_offset;
 217:nanopb/pb_encode.c **** 
 218:nanopb/pb_encode.c ****     if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 219:nanopb/pb_encode.c ****     {
 220:nanopb/pb_encode.c ****         /* Required proto2 fields inside proto3 submessage, pretty rare case */
 221:nanopb/pb_encode.c ****         return false;
 222:nanopb/pb_encode.c ****     }
 223:nanopb/pb_encode.c ****     else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 224:nanopb/pb_encode.c ****     {
 225:nanopb/pb_encode.c ****         /* Repeated fields inside proto3 submessage: present if count != 0 */
 226:nanopb/pb_encode.c ****         return *(const pb_size_t*)pSize == 0;
 227:nanopb/pb_encode.c ****     }
 228:nanopb/pb_encode.c ****     else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 229:nanopb/pb_encode.c ****     {
 230:nanopb/pb_encode.c ****         /* Oneof fields */
 231:nanopb/pb_encode.c ****         return *(const pb_size_t*)pSize == 0;
 232:nanopb/pb_encode.c ****     }
 233:nanopb/pb_encode.c ****     else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 234:nanopb/pb_encode.c ****     {
 235:nanopb/pb_encode.c ****         /* Proto2 optional fields inside proto3 submessage */
 236:nanopb/pb_encode.c ****         return *(const bool*)pSize == false;
 237:nanopb/pb_encode.c ****     }
 238:nanopb/pb_encode.c **** 
 239:nanopb/pb_encode.c ****     /* Rest is proto3 singular fields */
 240:nanopb/pb_encode.c **** 
 241:nanopb/pb_encode.c ****     if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 242:nanopb/pb_encode.c ****     {
 243:nanopb/pb_encode.c ****         if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 244:nanopb/pb_encode.c ****         {
 245:nanopb/pb_encode.c ****             const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 246:nanopb/pb_encode.c ****             return bytes->size == 0;
 247:nanopb/pb_encode.c ****         }
 248:nanopb/pb_encode.c ****         else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 249:nanopb/pb_encode.c ****         {
 250:nanopb/pb_encode.c ****             return *(const char*)pData == '\0';
 251:nanopb/pb_encode.c ****         }
 252:nanopb/pb_encode.c ****         else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 253:nanopb/pb_encode.c ****         {
 254:nanopb/pb_encode.c ****             /* Fixed length bytes is only empty if its length is fixed
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 7


 255:nanopb/pb_encode.c ****              * as 0. Which would be pretty strange, but we can check
 256:nanopb/pb_encode.c ****              * it anyway. */
 257:nanopb/pb_encode.c ****             return field->data_size == 0;
 258:nanopb/pb_encode.c ****         }
 259:nanopb/pb_encode.c ****         else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 260:nanopb/pb_encode.c ****         {
 261:nanopb/pb_encode.c ****             /* Check all fields in the submessage to find if any of them
 262:nanopb/pb_encode.c ****              * are non-zero. The comparison cannot be done byte-per-byte
 263:nanopb/pb_encode.c ****              * because the C struct may contain padding bytes that must
 264:nanopb/pb_encode.c ****              * be skipped.
 265:nanopb/pb_encode.c ****              */
 266:nanopb/pb_encode.c ****             pb_field_iter_t iter;
 267:nanopb/pb_encode.c ****             if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 268:nanopb/pb_encode.c ****             {
 269:nanopb/pb_encode.c ****                 do
 270:nanopb/pb_encode.c ****                 {
 271:nanopb/pb_encode.c ****                     if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 272:nanopb/pb_encode.c ****                     {
 273:nanopb/pb_encode.c ****                         return false;
 274:nanopb/pb_encode.c ****                     }
 275:nanopb/pb_encode.c ****                 } while (pb_field_iter_next(&iter));
 276:nanopb/pb_encode.c ****             }
 277:nanopb/pb_encode.c ****             return true;
 278:nanopb/pb_encode.c ****         }
 279:nanopb/pb_encode.c ****     }
 280:nanopb/pb_encode.c ****     
 281:nanopb/pb_encode.c **** 	{
 282:nanopb/pb_encode.c **** 	    /* Catch-all branch that does byte-per-byte comparison for zero value.
 283:nanopb/pb_encode.c **** 	     *
 284:nanopb/pb_encode.c **** 	     * This is for all pointer fields, and for static PB_LTYPE_VARINT,
 285:nanopb/pb_encode.c **** 	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
 286:nanopb/pb_encode.c **** 	     * callback fields. These all have integer or pointer value which
 287:nanopb/pb_encode.c **** 	     * can be compared with 0.
 288:nanopb/pb_encode.c **** 	     */
 289:nanopb/pb_encode.c **** 	    pb_size_t i;
 290:nanopb/pb_encode.c **** 	    const char *p = (const char*)pData;
 291:nanopb/pb_encode.c **** 	    for (i = 0; i < field->data_size; i++)
 292:nanopb/pb_encode.c **** 	    {
 293:nanopb/pb_encode.c **** 	        if (p[i] != 0)
 294:nanopb/pb_encode.c **** 	        {
 295:nanopb/pb_encode.c **** 	            return false;
 296:nanopb/pb_encode.c **** 	        }
 297:nanopb/pb_encode.c **** 	    }
 298:nanopb/pb_encode.c **** 
 299:nanopb/pb_encode.c **** 	    return true;
 300:nanopb/pb_encode.c **** 	}
 301:nanopb/pb_encode.c **** }
 302:nanopb/pb_encode.c **** 
 303:nanopb/pb_encode.c **** /* Encode a field with static or pointer allocation, i.e. one whose data
 304:nanopb/pb_encode.c ****  * is available to the encoder directly. */
 305:nanopb/pb_encode.c **** static bool checkreturn encode_basic_field(pb_ostream_t *stream,
 306:nanopb/pb_encode.c ****     const pb_field_t *field, const void *pData)
 307:nanopb/pb_encode.c **** {
 308:nanopb/pb_encode.c ****     pb_encoder_t func;
 309:nanopb/pb_encode.c ****     bool implicit_has;
 310:nanopb/pb_encode.c ****     const void *pSize = &implicit_has;
 311:nanopb/pb_encode.c ****     
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 8


 312:nanopb/pb_encode.c ****     func = PB_ENCODERS[PB_LTYPE(field->type)];
 313:nanopb/pb_encode.c ****     
 314:nanopb/pb_encode.c ****     if (field->size_offset)
 315:nanopb/pb_encode.c ****     {
 316:nanopb/pb_encode.c ****         /* Static optional, repeated or oneof field */
 317:nanopb/pb_encode.c ****         pSize = (const char*)pData + field->size_offset;
 318:nanopb/pb_encode.c ****     }
 319:nanopb/pb_encode.c ****     else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 320:nanopb/pb_encode.c ****     {
 321:nanopb/pb_encode.c ****         /* Proto3 style field, optional but without explicit has_ field. */
 322:nanopb/pb_encode.c ****         implicit_has = !pb_check_proto3_default_value(field, pData);
 323:nanopb/pb_encode.c ****     }
 324:nanopb/pb_encode.c ****     else
 325:nanopb/pb_encode.c ****     {
 326:nanopb/pb_encode.c ****         /* Required field, always present */
 327:nanopb/pb_encode.c ****         implicit_has = true;
 328:nanopb/pb_encode.c ****     }
 329:nanopb/pb_encode.c **** 
 330:nanopb/pb_encode.c ****     if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 331:nanopb/pb_encode.c ****     {
 332:nanopb/pb_encode.c ****         /* pData is a pointer to the field, which contains pointer to
 333:nanopb/pb_encode.c ****          * the data. If the 2nd pointer is NULL, it is interpreted as if
 334:nanopb/pb_encode.c ****          * the has_field was false.
 335:nanopb/pb_encode.c ****          */
 336:nanopb/pb_encode.c ****         pData = *(const void* const*)pData;
 337:nanopb/pb_encode.c ****         implicit_has = (pData != NULL);
 338:nanopb/pb_encode.c ****     }
 339:nanopb/pb_encode.c **** 
 340:nanopb/pb_encode.c ****     switch (PB_HTYPE(field->type))
 341:nanopb/pb_encode.c ****     {
 342:nanopb/pb_encode.c ****         case PB_HTYPE_REQUIRED:
 343:nanopb/pb_encode.c ****             if (!pData)
 344:nanopb/pb_encode.c ****                 PB_RETURN_ERROR(stream, "missing required field");
 345:nanopb/pb_encode.c ****             if (!pb_encode_tag_for_field(stream, field))
 346:nanopb/pb_encode.c ****                 return false;
 347:nanopb/pb_encode.c ****             if (!func(stream, field, pData))
 348:nanopb/pb_encode.c ****                 return false;
 349:nanopb/pb_encode.c ****             break;
 350:nanopb/pb_encode.c ****         
 351:nanopb/pb_encode.c ****         case PB_HTYPE_OPTIONAL:
 352:nanopb/pb_encode.c ****             if (*(const bool*)pSize)
 353:nanopb/pb_encode.c ****             {
 354:nanopb/pb_encode.c ****                 if (!pb_encode_tag_for_field(stream, field))
 355:nanopb/pb_encode.c ****                     return false;
 356:nanopb/pb_encode.c ****             
 357:nanopb/pb_encode.c ****                 if (!func(stream, field, pData))
 358:nanopb/pb_encode.c ****                     return false;
 359:nanopb/pb_encode.c ****             }
 360:nanopb/pb_encode.c ****             break;
 361:nanopb/pb_encode.c ****         
 362:nanopb/pb_encode.c ****         case PB_HTYPE_REPEATED:
 363:nanopb/pb_encode.c ****             if (!encode_array(stream, field, pData, *(const pb_size_t*)pSize, func))
 364:nanopb/pb_encode.c ****                 return false;
 365:nanopb/pb_encode.c ****             break;
 366:nanopb/pb_encode.c ****         
 367:nanopb/pb_encode.c ****         case PB_HTYPE_ONEOF:
 368:nanopb/pb_encode.c ****             if (*(const pb_size_t*)pSize == field->tag)
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 9


 369:nanopb/pb_encode.c ****             {
 370:nanopb/pb_encode.c ****                 if (!pb_encode_tag_for_field(stream, field))
 371:nanopb/pb_encode.c ****                     return false;
 372:nanopb/pb_encode.c **** 
 373:nanopb/pb_encode.c ****                 if (!func(stream, field, pData))
 374:nanopb/pb_encode.c ****                     return false;
 375:nanopb/pb_encode.c ****             }
 376:nanopb/pb_encode.c ****             break;
 377:nanopb/pb_encode.c ****             
 378:nanopb/pb_encode.c ****         default:
 379:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "invalid field type");
 380:nanopb/pb_encode.c ****     }
 381:nanopb/pb_encode.c ****     
 382:nanopb/pb_encode.c ****     return true;
 383:nanopb/pb_encode.c **** }
 384:nanopb/pb_encode.c **** 
 385:nanopb/pb_encode.c **** /* Encode a field with callback semantics. This means that a user function is
 386:nanopb/pb_encode.c ****  * called to provide and encode the actual data. */
 387:nanopb/pb_encode.c **** static bool checkreturn encode_callback_field(pb_ostream_t *stream,
 388:nanopb/pb_encode.c ****     const pb_field_t *field, const void *pData)
 389:nanopb/pb_encode.c **** {
  90              		.loc 1 389 1 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
 390:nanopb/pb_encode.c ****     const pb_callback_t *callback = (const pb_callback_t*)pData;
  94              		.loc 1 390 5 view .LVU20
 391:nanopb/pb_encode.c ****     
 392:nanopb/pb_encode.c **** #ifdef PB_OLD_CALLBACK_STYLE
 393:nanopb/pb_encode.c ****     const void *arg = callback->arg;
 394:nanopb/pb_encode.c **** #else
 395:nanopb/pb_encode.c ****     void * const *arg = &(callback->arg);
  95              		.loc 1 395 5 view .LVU21
 396:nanopb/pb_encode.c **** #endif    
 397:nanopb/pb_encode.c ****     
 398:nanopb/pb_encode.c ****     if (callback->funcs.encode != NULL)
  96              		.loc 1 398 5 view .LVU22
  97              		.loc 1 398 24 is_stmt 0 view .LVU23
  98 0000 52F8043B 		ldr	r3, [r2], #4
  99              	.LVL7:
 100              		.loc 1 398 8 view .LVU24
 101 0004 63B1     		cbz	r3, .L9
 389:nanopb/pb_encode.c ****     const pb_callback_t *callback = (const pb_callback_t*)pData;
 102              		.loc 1 389 1 view .LVU25
 103 0006 10B5     		push	{r4, lr}
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 4, -8
 107              		.cfi_offset 14, -4
 108 0008 0446     		mov	r4, r0
 399:nanopb/pb_encode.c ****     {
 400:nanopb/pb_encode.c ****         if (!callback->funcs.encode(stream, field, arg))
 109              		.loc 1 400 9 is_stmt 1 view .LVU26
 110              		.loc 1 400 14 is_stmt 0 view .LVU27
 111 000a 9847     		blx	r3
 112              	.LVL8:
 113              		.loc 1 400 12 view .LVU28
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 10


 114 000c 0346     		mov	r3, r0
 115 000e 08B1     		cbz	r0, .L14
 116              	.L7:
 401:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "callback error");
 402:nanopb/pb_encode.c ****     }
 403:nanopb/pb_encode.c ****     return true;
 404:nanopb/pb_encode.c **** }
 117              		.loc 1 404 1 view .LVU29
 118 0010 1846     		mov	r0, r3
 119 0012 10BD     		pop	{r4, pc}
 120              	.LVL9:
 121              	.L14:
 401:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "callback error");
 122              		.loc 1 401 13 is_stmt 1 view .LVU30
 123 0014 2269     		ldr	r2, [r4, #16]
 124 0016 0AB1     		cbz	r2, .L15
 125              	.L8:
 401:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "callback error");
 126              		.loc 1 401 13 is_stmt 0 discriminator 4 view .LVU31
 127 0018 2261     		str	r2, [r4, #16]
 128 001a F9E7     		b	.L7
 129              	.L15:
 401:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "callback error");
 130              		.loc 1 401 13 view .LVU32
 131 001c 024A     		ldr	r2, .L16
 132 001e FBE7     		b	.L8
 133              	.LVL10:
 134              	.L9:
 135              	.LCFI3:
 136              		.cfi_def_cfa_offset 0
 137              		.cfi_restore 4
 138              		.cfi_restore 14
 403:nanopb/pb_encode.c **** }
 139              		.loc 1 403 12 view .LVU33
 140 0020 0123     		movs	r3, #1
 141              		.loc 1 404 1 view .LVU34
 142 0022 1846     		mov	r0, r3
 143              	.LVL11:
 144              		.loc 1 404 1 view .LVU35
 145 0024 7047     		bx	lr
 146              	.L17:
 147 0026 00BF     		.align	2
 148              	.L16:
 149 0028 00000000 		.word	.LC0
 150              		.cfi_endproc
 151              	.LFE6:
 153              		.section	.text.pb_const_cast,"ax",%progbits
 154              		.align	1
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	pb_const_cast:
 161              	.LVL12:
 162              	.LFB10:
 405:nanopb/pb_encode.c **** 
 406:nanopb/pb_encode.c **** /* Encode a single field of any callback or static type. */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 11


 407:nanopb/pb_encode.c **** static bool checkreturn encode_field(pb_ostream_t *stream,
 408:nanopb/pb_encode.c ****     const pb_field_t *field, const void *pData)
 409:nanopb/pb_encode.c **** {
 410:nanopb/pb_encode.c ****     switch (PB_ATYPE(field->type))
 411:nanopb/pb_encode.c ****     {
 412:nanopb/pb_encode.c ****         case PB_ATYPE_STATIC:
 413:nanopb/pb_encode.c ****         case PB_ATYPE_POINTER:
 414:nanopb/pb_encode.c ****             return encode_basic_field(stream, field, pData);
 415:nanopb/pb_encode.c ****         
 416:nanopb/pb_encode.c ****         case PB_ATYPE_CALLBACK:
 417:nanopb/pb_encode.c ****             return encode_callback_field(stream, field, pData);
 418:nanopb/pb_encode.c ****         
 419:nanopb/pb_encode.c ****         default:
 420:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "invalid field type");
 421:nanopb/pb_encode.c ****     }
 422:nanopb/pb_encode.c **** }
 423:nanopb/pb_encode.c **** 
 424:nanopb/pb_encode.c **** /* Default handler for extension fields. Expects to have a pb_field_t
 425:nanopb/pb_encode.c ****  * pointer in the extension->type->arg field. */
 426:nanopb/pb_encode.c **** static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
 427:nanopb/pb_encode.c ****     const pb_extension_t *extension)
 428:nanopb/pb_encode.c **** {
 429:nanopb/pb_encode.c ****     const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 430:nanopb/pb_encode.c ****     
 431:nanopb/pb_encode.c ****     if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 432:nanopb/pb_encode.c ****     {
 433:nanopb/pb_encode.c ****         /* For pointer extensions, the pointer is stored directly
 434:nanopb/pb_encode.c ****          * in the extension structure. This avoids having an extra
 435:nanopb/pb_encode.c ****          * indirection. */
 436:nanopb/pb_encode.c ****         return encode_field(stream, field, &extension->dest);
 437:nanopb/pb_encode.c ****     }
 438:nanopb/pb_encode.c ****     else
 439:nanopb/pb_encode.c ****     {
 440:nanopb/pb_encode.c ****         return encode_field(stream, field, extension->dest);
 441:nanopb/pb_encode.c ****     }
 442:nanopb/pb_encode.c **** }
 443:nanopb/pb_encode.c **** 
 444:nanopb/pb_encode.c **** /* Walk through all the registered extensions and give them a chance
 445:nanopb/pb_encode.c ****  * to encode themselves. */
 446:nanopb/pb_encode.c **** static bool checkreturn encode_extension_field(pb_ostream_t *stream,
 447:nanopb/pb_encode.c ****     const pb_field_t *field, const void *pData)
 448:nanopb/pb_encode.c **** {
 449:nanopb/pb_encode.c ****     const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 450:nanopb/pb_encode.c ****     PB_UNUSED(field);
 451:nanopb/pb_encode.c ****     
 452:nanopb/pb_encode.c ****     while (extension)
 453:nanopb/pb_encode.c ****     {
 454:nanopb/pb_encode.c ****         bool status;
 455:nanopb/pb_encode.c ****         if (extension->type->encode)
 456:nanopb/pb_encode.c ****             status = extension->type->encode(stream, extension);
 457:nanopb/pb_encode.c ****         else
 458:nanopb/pb_encode.c ****             status = default_extension_encoder(stream, extension);
 459:nanopb/pb_encode.c **** 
 460:nanopb/pb_encode.c ****         if (!status)
 461:nanopb/pb_encode.c ****             return false;
 462:nanopb/pb_encode.c ****         
 463:nanopb/pb_encode.c ****         extension = extension->next;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 12


 464:nanopb/pb_encode.c ****     }
 465:nanopb/pb_encode.c ****     
 466:nanopb/pb_encode.c ****     return true;
 467:nanopb/pb_encode.c **** }
 468:nanopb/pb_encode.c **** 
 469:nanopb/pb_encode.c **** /*********************
 470:nanopb/pb_encode.c ****  * Encode all fields *
 471:nanopb/pb_encode.c ****  *********************/
 472:nanopb/pb_encode.c **** 
 473:nanopb/pb_encode.c **** static void *pb_const_cast(const void *p)
 474:nanopb/pb_encode.c **** {
 163              		.loc 1 474 1 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 475:nanopb/pb_encode.c ****     /* Note: this casts away const, in order to use the common field iterator
 476:nanopb/pb_encode.c ****      * logic for both encoding and decoding. */
 477:nanopb/pb_encode.c ****     union {
 168              		.loc 1 477 5 view .LVU37
 478:nanopb/pb_encode.c ****         void *p1;
 479:nanopb/pb_encode.c ****         const void *p2;
 480:nanopb/pb_encode.c ****     } t;
 481:nanopb/pb_encode.c ****     t.p2 = p;
 169              		.loc 1 481 5 view .LVU38
 482:nanopb/pb_encode.c ****     return t.p1;
 170              		.loc 1 482 5 view .LVU39
 483:nanopb/pb_encode.c **** }
 171              		.loc 1 483 1 is_stmt 0 view .LVU40
 172 0000 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE10:
 176              		.section	.text.pb_check_proto3_default_value,"ax",%progbits
 177              		.align	1
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu softvfp
 183              	pb_check_proto3_default_value:
 184              	.LVL13:
 185              	.LFB4:
 214:nanopb/pb_encode.c ****     pb_type_t type = field->type;
 186              		.loc 1 214 1 is_stmt 1 view -0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 24
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 214:nanopb/pb_encode.c ****     pb_type_t type = field->type;
 190              		.loc 1 214 1 is_stmt 0 view .LVU42
 191 0000 10B5     		push	{r4, lr}
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 4, -8
 195              		.cfi_offset 14, -4
 196 0002 86B0     		sub	sp, sp, #24
 197              	.LCFI5:
 198              		.cfi_def_cfa_offset 32
 215:nanopb/pb_encode.c ****     const void *pSize = (const char*)pData + field->size_offset;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 13


 199              		.loc 1 215 5 is_stmt 1 view .LVU43
 215:nanopb/pb_encode.c ****     const void *pSize = (const char*)pData + field->size_offset;
 200              		.loc 1 215 15 is_stmt 0 view .LVU44
 201 0004 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 202              	.LVL14:
 216:nanopb/pb_encode.c **** 
 203              		.loc 1 216 5 is_stmt 1 view .LVU45
 216:nanopb/pb_encode.c **** 
 204              		.loc 1 216 51 is_stmt 0 view .LVU46
 205 0006 90F90340 		ldrsb	r4, [r0, #3]
 206              	.LVL15:
 218:nanopb/pb_encode.c ****     {
 207              		.loc 1 218 5 is_stmt 1 view .LVU47
 218:nanopb/pb_encode.c ****     {
 208              		.loc 1 218 8 is_stmt 0 view .LVU48
 209 000a 13F03002 		ands	r2, r3, #48
 210 000e 56D0     		beq	.L33
 223:nanopb/pb_encode.c ****     {
 211              		.loc 1 223 10 is_stmt 1 view .LVU49
 223:nanopb/pb_encode.c ****     {
 212              		.loc 1 223 13 is_stmt 0 view .LVU50
 213 0010 202A     		cmp	r2, #32
 214 0012 12D0     		beq	.L38
 228:nanopb/pb_encode.c ****     {
 215              		.loc 1 228 10 is_stmt 1 view .LVU51
 228:nanopb/pb_encode.c ****     {
 216              		.loc 1 228 13 is_stmt 0 view .LVU52
 217 0014 302A     		cmp	r2, #48
 218 0016 15D0     		beq	.L39
 233:nanopb/pb_encode.c ****     {
 219              		.loc 1 233 10 is_stmt 1 view .LVU53
 233:nanopb/pb_encode.c ****     {
 220              		.loc 1 233 13 is_stmt 0 view .LVU54
 221 0018 102A     		cmp	r2, #16
 222 001a 18D0     		beq	.L40
 223              	.L23:
 241:nanopb/pb_encode.c ****     {
 224              		.loc 1 241 5 is_stmt 1 view .LVU55
 241:nanopb/pb_encode.c ****     {
 225              		.loc 1 241 8 is_stmt 0 view .LVU56
 226 001c 13F0C00F 		tst	r3, #192
 227 0020 42D1     		bne	.L34
 243:nanopb/pb_encode.c ****         {
 228              		.loc 1 243 9 is_stmt 1 view .LVU57
 229 0022 03F00F03 		and	r3, r3, #15
 230              	.LVL16:
 243:nanopb/pb_encode.c ****         {
 231              		.loc 1 243 12 is_stmt 0 view .LVU58
 232 0026 052B     		cmp	r3, #5
 233 0028 17D0     		beq	.L41
 248:nanopb/pb_encode.c ****         {
 234              		.loc 1 248 14 is_stmt 1 view .LVU59
 248:nanopb/pb_encode.c ****         {
 235              		.loc 1 248 17 is_stmt 0 view .LVU60
 236 002a 062B     		cmp	r3, #6
 237 002c 1AD0     		beq	.L42
 252:nanopb/pb_encode.c ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 14


 238              		.loc 1 252 14 is_stmt 1 view .LVU61
 252:nanopb/pb_encode.c ****         {
 239              		.loc 1 252 17 is_stmt 0 view .LVU62
 240 002e 092B     		cmp	r3, #9
 241 0030 1DD0     		beq	.L43
 259:nanopb/pb_encode.c ****         {
 242              		.loc 1 259 14 is_stmt 1 view .LVU63
 259:nanopb/pb_encode.c ****         {
 243              		.loc 1 259 17 is_stmt 0 view .LVU64
 244 0032 072B     		cmp	r3, #7
 245 0034 20D0     		beq	.L44
 246 0036 0023     		movs	r3, #0
 247 0038 37E0     		b	.L31
 248              	.LVL17:
 249              	.L38:
 226:nanopb/pb_encode.c ****     }
 250              		.loc 1 226 9 is_stmt 1 view .LVU65
 226:nanopb/pb_encode.c ****     }
 251              		.loc 1 226 16 is_stmt 0 view .LVU66
 252 003a 0B5D     		ldrb	r3, [r1, r4]	@ zero_extendqisi2
 253              	.LVL18:
 226:nanopb/pb_encode.c ****     }
 254              		.loc 1 226 41 view .LVU67
 255 003c B3FA83F3 		clz	r3, r3
 256 0040 5B09     		lsrs	r3, r3, #5
 257 0042 3DE0     		b	.L20
 258              	.LVL19:
 259              	.L39:
 231:nanopb/pb_encode.c ****     }
 260              		.loc 1 231 9 is_stmt 1 view .LVU68
 231:nanopb/pb_encode.c ****     }
 261              		.loc 1 231 16 is_stmt 0 view .LVU69
 262 0044 0B5D     		ldrb	r3, [r1, r4]	@ zero_extendqisi2
 263              	.LVL20:
 231:nanopb/pb_encode.c ****     }
 264              		.loc 1 231 41 view .LVU70
 265 0046 B3FA83F3 		clz	r3, r3
 266 004a 5B09     		lsrs	r3, r3, #5
 267 004c 38E0     		b	.L20
 268              	.LVL21:
 269              	.L40:
 233:nanopb/pb_encode.c ****     {
 270              		.loc 1 233 50 discriminator 1 view .LVU71
 271 004e 002C     		cmp	r4, #0
 272 0050 E4D0     		beq	.L23
 236:nanopb/pb_encode.c ****     }
 273              		.loc 1 236 9 is_stmt 1 view .LVU72
 236:nanopb/pb_encode.c ****     }
 274              		.loc 1 236 16 is_stmt 0 view .LVU73
 275 0052 0B5D     		ldrb	r3, [r1, r4]	@ zero_extendqisi2
 276              	.LVL22:
 236:nanopb/pb_encode.c ****     }
 277              		.loc 1 236 9 view .LVU74
 278 0054 83F00103 		eor	r3, r3, #1
 236:nanopb/pb_encode.c ****     }
 279              		.loc 1 236 36 view .LVU75
 280 0058 32E0     		b	.L20
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 15


 281              	.L41:
 282              	.LBB2:
 245:nanopb/pb_encode.c ****             return bytes->size == 0;
 283              		.loc 1 245 13 is_stmt 1 view .LVU76
 284              	.LVL23:
 246:nanopb/pb_encode.c ****         }
 285              		.loc 1 246 13 view .LVU77
 246:nanopb/pb_encode.c ****         }
 286              		.loc 1 246 25 is_stmt 0 view .LVU78
 287 005a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 246:nanopb/pb_encode.c ****         }
 288              		.loc 1 246 32 view .LVU79
 289 005c B3FA83F3 		clz	r3, r3
 290 0060 5B09     		lsrs	r3, r3, #5
 291 0062 2DE0     		b	.L20
 292              	.LVL24:
 293              	.L42:
 246:nanopb/pb_encode.c ****         }
 294              		.loc 1 246 32 view .LVU80
 295              	.LBE2:
 250:nanopb/pb_encode.c ****         }
 296              		.loc 1 250 13 is_stmt 1 view .LVU81
 250:nanopb/pb_encode.c ****         }
 297              		.loc 1 250 20 is_stmt 0 view .LVU82
 298 0064 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 250:nanopb/pb_encode.c ****         }
 299              		.loc 1 250 40 view .LVU83
 300 0066 B3FA83F3 		clz	r3, r3
 301 006a 5B09     		lsrs	r3, r3, #5
 302 006c 28E0     		b	.L20
 303              	.L43:
 257:nanopb/pb_encode.c ****         }
 304              		.loc 1 257 13 is_stmt 1 view .LVU84
 257:nanopb/pb_encode.c ****         }
 305              		.loc 1 257 25 is_stmt 0 view .LVU85
 306 006e 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 257:nanopb/pb_encode.c ****         }
 307              		.loc 1 257 37 view .LVU86
 308 0070 B3FA83F3 		clz	r3, r3
 309 0074 5B09     		lsrs	r3, r3, #5
 310 0076 23E0     		b	.L20
 311              	.L44:
 312              	.LBB3:
 266:nanopb/pb_encode.c ****             if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 313              		.loc 1 266 13 is_stmt 1 view .LVU87
 267:nanopb/pb_encode.c ****             {
 314              		.loc 1 267 13 view .LVU88
 267:nanopb/pb_encode.c ****             {
 315              		.loc 1 267 68 is_stmt 0 view .LVU89
 316 0078 D0F80640 		ldr	r4, [r0, #6]	@ unaligned
 317              	.LVL25:
 267:nanopb/pb_encode.c ****             {
 318              		.loc 1 267 17 view .LVU90
 319 007c 0846     		mov	r0, r1
 320              	.LVL26:
 267:nanopb/pb_encode.c ****             {
 321              		.loc 1 267 17 view .LVU91
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 16


 322 007e FFF7FEFF 		bl	pb_const_cast
 323              	.LVL27:
 267:nanopb/pb_encode.c ****             {
 324              		.loc 1 267 17 view .LVU92
 325 0082 0246     		mov	r2, r0
 326 0084 2146     		mov	r1, r4
 327 0086 6846     		mov	r0, sp
 328 0088 FFF7FEFF 		bl	pb_field_iter_begin
 329              	.LVL28:
 267:nanopb/pb_encode.c ****             {
 330              		.loc 1 267 16 view .LVU93
 331 008c 50B1     		cbz	r0, .L28
 332              	.L30:
 269:nanopb/pb_encode.c ****                 {
 333              		.loc 1 269 17 is_stmt 1 view .LVU94
 271:nanopb/pb_encode.c ****                     {
 334              		.loc 1 271 21 view .LVU95
 271:nanopb/pb_encode.c ****                     {
 335              		.loc 1 271 26 is_stmt 0 view .LVU96
 336 008e 0499     		ldr	r1, [sp, #16]
 337 0090 0198     		ldr	r0, [sp, #4]
 338 0092 FFF7B5FF 		bl	pb_check_proto3_default_value
 339              	.LVL29:
 271:nanopb/pb_encode.c ****                     {
 340              		.loc 1 271 24 view .LVU97
 341 0096 0346     		mov	r3, r0
 342 0098 90B1     		cbz	r0, .L20
 275:nanopb/pb_encode.c ****             }
 343              		.loc 1 275 26 view .LVU98
 344 009a 6846     		mov	r0, sp
 345 009c FFF7FEFF 		bl	pb_field_iter_next
 346              	.LVL30:
 275:nanopb/pb_encode.c ****             }
 347              		.loc 1 275 17 view .LVU99
 348 00a0 0028     		cmp	r0, #0
 349 00a2 F4D1     		bne	.L30
 350              	.L28:
 277:nanopb/pb_encode.c ****         }
 351              		.loc 1 277 13 is_stmt 1 view .LVU100
 277:nanopb/pb_encode.c ****         }
 352              		.loc 1 277 20 is_stmt 0 view .LVU101
 353 00a4 0123     		movs	r3, #1
 354 00a6 0BE0     		b	.L20
 355              	.LVL31:
 356              	.L34:
 277:nanopb/pb_encode.c ****         }
 357              		.loc 1 277 20 view .LVU102
 358              	.LBE3:
 359 00a8 0023     		movs	r3, #0
 360              	.LVL32:
 361              	.L31:
 362              	.LBB4:
 291:nanopb/pb_encode.c **** 	    {
 363              		.loc 1 291 27 discriminator 1 view .LVU103
 364 00aa 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 291:nanopb/pb_encode.c **** 	    {
 365              		.loc 1 291 6 discriminator 1 view .LVU104
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 17


 366 00ac 9A42     		cmp	r2, r3
 367 00ae 04D9     		bls	.L45
 293:nanopb/pb_encode.c **** 	        {
 368              		.loc 1 293 10 is_stmt 1 view .LVU105
 293:nanopb/pb_encode.c **** 	        {
 369              		.loc 1 293 15 is_stmt 0 view .LVU106
 370 00b0 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 293:nanopb/pb_encode.c **** 	        {
 371              		.loc 1 293 13 view .LVU107
 372 00b2 42B9     		cbnz	r2, .L36
 291:nanopb/pb_encode.c **** 	    {
 373              		.loc 1 291 41 discriminator 2 view .LVU108
 374 00b4 0133     		adds	r3, r3, #1
 375              	.LVL33:
 291:nanopb/pb_encode.c **** 	    {
 376              		.loc 1 291 41 discriminator 2 view .LVU109
 377 00b6 DBB2     		uxtb	r3, r3
 378              	.LVL34:
 291:nanopb/pb_encode.c **** 	    {
 379              		.loc 1 291 41 discriminator 2 view .LVU110
 380 00b8 F7E7     		b	.L31
 381              	.L45:
 299:nanopb/pb_encode.c **** 	}
 382              		.loc 1 299 13 view .LVU111
 383 00ba 0123     		movs	r3, #1
 384              	.LVL35:
 299:nanopb/pb_encode.c **** 	}
 385              		.loc 1 299 13 view .LVU112
 386 00bc 00E0     		b	.L20
 387              	.LVL36:
 388              	.L33:
 299:nanopb/pb_encode.c **** 	}
 389              		.loc 1 299 13 view .LVU113
 390              	.LBE4:
 221:nanopb/pb_encode.c ****     }
 391              		.loc 1 221 16 view .LVU114
 392 00be 0023     		movs	r3, #0
 393              	.LVL37:
 394              	.L20:
 301:nanopb/pb_encode.c **** 
 395              		.loc 1 301 1 discriminator 1 view .LVU115
 396 00c0 1846     		mov	r0, r3
 397 00c2 06B0     		add	sp, sp, #24
 398              	.LCFI6:
 399              		.cfi_remember_state
 400              		.cfi_def_cfa_offset 8
 401              		@ sp needed
 402 00c4 10BD     		pop	{r4, pc}
 403              	.LVL38:
 404              	.L36:
 405              	.LCFI7:
 406              		.cfi_restore_state
 407              	.LBB5:
 295:nanopb/pb_encode.c **** 	        }
 408              		.loc 1 295 21 view .LVU116
 409 00c6 0023     		movs	r3, #0
 410              	.LVL39:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 18


 295:nanopb/pb_encode.c **** 	        }
 411              		.loc 1 295 21 view .LVU117
 412 00c8 FAE7     		b	.L20
 413              	.LBE5:
 414              		.cfi_endproc
 415              	.LFE4:
 417              		.section	.text.pb_ostream_from_buffer,"ax",%progbits
 418              		.align	1
 419              		.global	pb_ostream_from_buffer
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu softvfp
 425              	pb_ostream_from_buffer:
 426              	.LVL40:
 427              	.LFB1:
  83:nanopb/pb_encode.c ****     pb_ostream_t stream;
 428              		.loc 1 83 1 is_stmt 1 view -0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              		@ link register save eliminated.
  83:nanopb/pb_encode.c ****     pb_ostream_t stream;
 433              		.loc 1 83 1 is_stmt 0 view .LVU119
 434 0000 10B4     		push	{r4}
 435              	.LCFI8:
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 4, -4
  84:nanopb/pb_encode.c **** #ifdef PB_BUFFER_ONLY
 438              		.loc 1 84 5 is_stmt 1 view .LVU120
  88:nanopb/pb_encode.c **** #endif
 439              		.loc 1 88 5 view .LVU121
  88:nanopb/pb_encode.c **** #endif
 440              		.loc 1 88 21 is_stmt 0 view .LVU122
 441 0002 044C     		ldr	r4, .L48
 442 0004 0460     		str	r4, [r0]
  90:nanopb/pb_encode.c ****     stream.max_size = bufsize;
 443              		.loc 1 90 5 is_stmt 1 view .LVU123
  90:nanopb/pb_encode.c ****     stream.max_size = bufsize;
 444              		.loc 1 90 18 is_stmt 0 view .LVU124
 445 0006 4160     		str	r1, [r0, #4]
  91:nanopb/pb_encode.c ****     stream.bytes_written = 0;
 446              		.loc 1 91 5 is_stmt 1 view .LVU125
  91:nanopb/pb_encode.c ****     stream.bytes_written = 0;
 447              		.loc 1 91 21 is_stmt 0 view .LVU126
 448 0008 8260     		str	r2, [r0, #8]
  92:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 449              		.loc 1 92 5 is_stmt 1 view .LVU127
  92:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 450              		.loc 1 92 26 is_stmt 0 view .LVU128
 451 000a 0022     		movs	r2, #0
 452              	.LVL41:
  92:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 453              		.loc 1 92 26 view .LVU129
 454 000c C260     		str	r2, [r0, #12]
  94:nanopb/pb_encode.c **** #endif
 455              		.loc 1 94 5 is_stmt 1 view .LVU130
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 19


  94:nanopb/pb_encode.c **** #endif
 456              		.loc 1 94 19 is_stmt 0 view .LVU131
 457 000e 0261     		str	r2, [r0, #16]
  96:nanopb/pb_encode.c **** }
 458              		.loc 1 96 5 is_stmt 1 view .LVU132
  97:nanopb/pb_encode.c **** 
 459              		.loc 1 97 1 is_stmt 0 view .LVU133
 460 0010 10BC     		pop	{r4}
 461              	.LCFI9:
 462              		.cfi_restore 4
 463              		.cfi_def_cfa_offset 0
 464 0012 7047     		bx	lr
 465              	.L49:
 466              		.align	2
 467              	.L48:
 468 0014 00000000 		.word	buf_write
 469              		.cfi_endproc
 470              	.LFE1:
 472              		.section	.text.pb_write,"ax",%progbits
 473              		.align	1
 474              		.global	pb_write
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu softvfp
 480              	pb_write:
 481              	.LVL42:
 482              	.LFB2:
 100:nanopb/pb_encode.c ****     if (stream->callback != NULL)
 483              		.loc 1 100 1 is_stmt 1 view -0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 100:nanopb/pb_encode.c ****     if (stream->callback != NULL)
 487              		.loc 1 100 1 is_stmt 0 view .LVU135
 488 0000 70B5     		push	{r4, r5, r6, lr}
 489              	.LCFI10:
 490              		.cfi_def_cfa_offset 16
 491              		.cfi_offset 4, -16
 492              		.cfi_offset 5, -12
 493              		.cfi_offset 6, -8
 494              		.cfi_offset 14, -4
 495 0002 0446     		mov	r4, r0
 496 0004 1546     		mov	r5, r2
 101:nanopb/pb_encode.c ****     {
 497              		.loc 1 101 5 is_stmt 1 view .LVU136
 101:nanopb/pb_encode.c ****     {
 498              		.loc 1 101 15 is_stmt 0 view .LVU137
 499 0006 0668     		ldr	r6, [r0]
 101:nanopb/pb_encode.c ****     {
 500              		.loc 1 101 8 view .LVU138
 501 0008 46B1     		cbz	r6, .L51
 103:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "stream full");
 502              		.loc 1 103 9 is_stmt 1 view .LVU139
 103:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "stream full");
 503              		.loc 1 103 19 is_stmt 0 view .LVU140
 504 000a C368     		ldr	r3, [r0, #12]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 20


 103:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "stream full");
 505              		.loc 1 103 35 view .LVU141
 506 000c 1344     		add	r3, r3, r2
 103:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "stream full");
 507              		.loc 1 103 51 view .LVU142
 508 000e 8268     		ldr	r2, [r0, #8]
 509              	.LVL43:
 103:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "stream full");
 510              		.loc 1 103 12 view .LVU143
 511 0010 9342     		cmp	r3, r2
 512 0012 09D8     		bhi	.L57
 110:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "io error");
 513              		.loc 1 110 9 is_stmt 1 view .LVU144
 110:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "io error");
 514              		.loc 1 110 14 is_stmt 0 view .LVU145
 515 0014 2A46     		mov	r2, r5
 516 0016 B047     		blx	r6
 517              	.LVL44:
 110:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "io error");
 518              		.loc 1 110 12 view .LVU146
 519 0018 0346     		mov	r3, r0
 520 001a 60B1     		cbz	r0, .L58
 521              	.L51:
 115:nanopb/pb_encode.c ****     return true;
 522              		.loc 1 115 5 is_stmt 1 view .LVU147
 115:nanopb/pb_encode.c ****     return true;
 523              		.loc 1 115 27 is_stmt 0 view .LVU148
 524 001c E368     		ldr	r3, [r4, #12]
 525 001e 1D44     		add	r5, r5, r3
 526              	.LVL45:
 115:nanopb/pb_encode.c ****     return true;
 527              		.loc 1 115 27 view .LVU149
 528 0020 E560     		str	r5, [r4, #12]
 116:nanopb/pb_encode.c **** }
 529              		.loc 1 116 5 is_stmt 1 view .LVU150
 116:nanopb/pb_encode.c **** }
 530              		.loc 1 116 12 is_stmt 0 view .LVU151
 531 0022 0123     		movs	r3, #1
 532              	.L54:
 117:nanopb/pb_encode.c **** 
 533              		.loc 1 117 1 view .LVU152
 534 0024 1846     		mov	r0, r3
 535 0026 70BD     		pop	{r4, r5, r6, pc}
 536              	.LVL46:
 537              	.L57:
 104:nanopb/pb_encode.c **** 
 538              		.loc 1 104 13 is_stmt 1 view .LVU153
 539 0028 0369     		ldr	r3, [r0, #16]
 540 002a 13B1     		cbz	r3, .L59
 541              	.L53:
 104:nanopb/pb_encode.c **** 
 542              		.loc 1 104 13 is_stmt 0 discriminator 4 view .LVU154
 543 002c 2361     		str	r3, [r4, #16]
 544 002e 0023     		movs	r3, #0
 545 0030 F8E7     		b	.L54
 546              	.L59:
 104:nanopb/pb_encode.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 21


 547              		.loc 1 104 13 view .LVU155
 548 0032 044B     		ldr	r3, .L61
 549 0034 FAE7     		b	.L53
 550              	.LVL47:
 551              	.L58:
 111:nanopb/pb_encode.c **** #endif
 552              		.loc 1 111 13 is_stmt 1 view .LVU156
 553 0036 2269     		ldr	r2, [r4, #16]
 554 0038 0AB1     		cbz	r2, .L60
 555              	.L55:
 111:nanopb/pb_encode.c **** #endif
 556              		.loc 1 111 13 is_stmt 0 discriminator 4 view .LVU157
 557 003a 2261     		str	r2, [r4, #16]
 558 003c F2E7     		b	.L54
 559              	.L60:
 111:nanopb/pb_encode.c **** #endif
 560              		.loc 1 111 13 view .LVU158
 561 003e 024A     		ldr	r2, .L61+4
 562 0040 FBE7     		b	.L55
 563              	.L62:
 564 0042 00BF     		.align	2
 565              	.L61:
 566 0044 00000000 		.word	.LC1
 567 0048 0C000000 		.word	.LC2
 568              		.cfi_endproc
 569              	.LFE2:
 571              		.section	.text.pb_encode_varint,"ax",%progbits
 572              		.align	1
 573              		.global	pb_encode_varint
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu softvfp
 579              	pb_encode_varint:
 580              	.LVL48:
 581              	.LFB15:
 484:nanopb/pb_encode.c **** 
 485:nanopb/pb_encode.c **** bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
 486:nanopb/pb_encode.c **** {
 487:nanopb/pb_encode.c ****     pb_field_iter_t iter;
 488:nanopb/pb_encode.c ****     if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 489:nanopb/pb_encode.c ****         return true; /* Empty message type */
 490:nanopb/pb_encode.c ****     
 491:nanopb/pb_encode.c ****     do {
 492:nanopb/pb_encode.c ****         if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 493:nanopb/pb_encode.c ****         {
 494:nanopb/pb_encode.c ****             /* Special case for the extension field placeholder */
 495:nanopb/pb_encode.c ****             if (!encode_extension_field(stream, iter.pos, iter.pData))
 496:nanopb/pb_encode.c ****                 return false;
 497:nanopb/pb_encode.c ****         }
 498:nanopb/pb_encode.c ****         else
 499:nanopb/pb_encode.c ****         {
 500:nanopb/pb_encode.c ****             /* Regular field */
 501:nanopb/pb_encode.c ****             if (!encode_field(stream, iter.pos, iter.pData))
 502:nanopb/pb_encode.c ****                 return false;
 503:nanopb/pb_encode.c ****         }
 504:nanopb/pb_encode.c ****     } while (pb_field_iter_next(&iter));
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 22


 505:nanopb/pb_encode.c ****     
 506:nanopb/pb_encode.c ****     return true;
 507:nanopb/pb_encode.c **** }
 508:nanopb/pb_encode.c **** 
 509:nanopb/pb_encode.c **** bool pb_encode_delimited(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
 510:nanopb/pb_encode.c **** {
 511:nanopb/pb_encode.c ****     return pb_encode_submessage(stream, fields, src_struct);
 512:nanopb/pb_encode.c **** }
 513:nanopb/pb_encode.c **** 
 514:nanopb/pb_encode.c **** bool pb_encode_nullterminated(pb_ostream_t *stream, const pb_field_t fields[], const void *src_stru
 515:nanopb/pb_encode.c **** {
 516:nanopb/pb_encode.c ****     const pb_byte_t zero = 0;
 517:nanopb/pb_encode.c **** 
 518:nanopb/pb_encode.c ****     if (!pb_encode(stream, fields, src_struct))
 519:nanopb/pb_encode.c ****         return false;
 520:nanopb/pb_encode.c **** 
 521:nanopb/pb_encode.c ****     return pb_write(stream, &zero, 1);
 522:nanopb/pb_encode.c **** }
 523:nanopb/pb_encode.c **** 
 524:nanopb/pb_encode.c **** bool pb_get_encoded_size(size_t *size, const pb_field_t fields[], const void *src_struct)
 525:nanopb/pb_encode.c **** {
 526:nanopb/pb_encode.c ****     pb_ostream_t stream = PB_OSTREAM_SIZING;
 527:nanopb/pb_encode.c ****     
 528:nanopb/pb_encode.c ****     if (!pb_encode(&stream, fields, src_struct))
 529:nanopb/pb_encode.c ****         return false;
 530:nanopb/pb_encode.c ****     
 531:nanopb/pb_encode.c ****     *size = stream.bytes_written;
 532:nanopb/pb_encode.c ****     return true;
 533:nanopb/pb_encode.c **** }
 534:nanopb/pb_encode.c **** 
 535:nanopb/pb_encode.c **** /********************
 536:nanopb/pb_encode.c ****  * Helper functions *
 537:nanopb/pb_encode.c ****  ********************/
 538:nanopb/pb_encode.c **** bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
 539:nanopb/pb_encode.c **** {
 582              		.loc 1 539 1 is_stmt 1 view -0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 16
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              		.loc 1 539 1 is_stmt 0 view .LVU160
 587 0000 30B5     		push	{r4, r5, lr}
 588              	.LCFI11:
 589              		.cfi_def_cfa_offset 12
 590              		.cfi_offset 4, -12
 591              		.cfi_offset 5, -8
 592              		.cfi_offset 14, -4
 593 0002 85B0     		sub	sp, sp, #20
 594              	.LCFI12:
 595              		.cfi_def_cfa_offset 32
 540:nanopb/pb_encode.c ****     pb_byte_t buffer[10];
 596              		.loc 1 540 5 is_stmt 1 view .LVU161
 541:nanopb/pb_encode.c ****     size_t i = 0;
 597              		.loc 1 541 5 view .LVU162
 598              	.LVL49:
 542:nanopb/pb_encode.c ****     
 543:nanopb/pb_encode.c ****     if (value <= 0x7F)
 599              		.loc 1 543 5 view .LVU163
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 23


 600              		.loc 1 543 8 is_stmt 0 view .LVU164
 601 0004 002B     		cmp	r3, #0
 602 0006 08BF     		it	eq
 603 0008 802A     		cmpeq	r2, #128
 604 000a 11D3     		bcc	.L69
 541:nanopb/pb_encode.c ****     size_t i = 0;
 605              		.loc 1 541 12 view .LVU165
 606 000c 0024     		movs	r4, #0
 607              	.LVL50:
 608              	.L64:
 544:nanopb/pb_encode.c ****     {
 545:nanopb/pb_encode.c ****         pb_byte_t v = (pb_byte_t)value;
 546:nanopb/pb_encode.c ****         return pb_write(stream, &v, 1);
 547:nanopb/pb_encode.c ****     }
 548:nanopb/pb_encode.c ****     
 549:nanopb/pb_encode.c ****     while (value)
 609              		.loc 1 549 11 view .LVU166
 610 000e 52EA0301 		orrs	r1, r2, r3
 611 0012 15D0     		beq	.L70
 550:nanopb/pb_encode.c ****     {
 551:nanopb/pb_encode.c ****         buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 612              		.loc 1 551 9 is_stmt 1 view .LVU167
 613              		.loc 1 551 21 is_stmt 0 view .LVU168
 614 0014 62F07F05 		orn	r5, r2, #127
 615              		.loc 1 551 19 view .LVU169
 616 0018 04A9     		add	r1, sp, #16
 617 001a 2144     		add	r1, r1, r4
 618 001c 01F80C5C 		strb	r5, [r1, #-12]
 552:nanopb/pb_encode.c ****         value >>= 7;
 619              		.loc 1 552 9 is_stmt 1 view .LVU170
 620              		.loc 1 552 15 is_stmt 0 view .LVU171
 621 0020 D109     		lsrs	r1, r2, #7
 622 0022 41EA4361 		orr	r1, r1, r3, lsl #25
 623 0026 DD09     		lsrs	r5, r3, #7
 624 0028 0A46     		mov	r2, r1
 625              	.LVL51:
 626              		.loc 1 552 15 view .LVU172
 627 002a 2B46     		mov	r3, r5
 628              	.LVL52:
 553:nanopb/pb_encode.c ****         i++;
 629              		.loc 1 553 9 is_stmt 1 view .LVU173
 630              		.loc 1 553 10 is_stmt 0 view .LVU174
 631 002c 0134     		adds	r4, r4, #1
 632              	.LVL53:
 633              		.loc 1 553 10 view .LVU175
 634 002e EEE7     		b	.L64
 635              	.LVL54:
 636              	.L69:
 637              	.LBB6:
 545:nanopb/pb_encode.c ****         return pb_write(stream, &v, 1);
 638              		.loc 1 545 9 is_stmt 1 view .LVU176
 545:nanopb/pb_encode.c ****         return pb_write(stream, &v, 1);
 639              		.loc 1 545 19 is_stmt 0 view .LVU177
 640 0030 8DF80320 		strb	r2, [sp, #3]
 546:nanopb/pb_encode.c ****     }
 641              		.loc 1 546 9 is_stmt 1 view .LVU178
 546:nanopb/pb_encode.c ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 24


 642              		.loc 1 546 16 is_stmt 0 view .LVU179
 643 0034 0122     		movs	r2, #1
 644              	.LVL55:
 546:nanopb/pb_encode.c ****     }
 645              		.loc 1 546 16 view .LVU180
 646 0036 0DF10301 		add	r1, sp, #3
 647 003a FFF7FEFF 		bl	pb_write
 648              	.LVL56:
 546:nanopb/pb_encode.c ****     }
 649              		.loc 1 546 16 view .LVU181
 650 003e 0CE0     		b	.L65
 651              	.LVL57:
 652              	.L70:
 546:nanopb/pb_encode.c ****     }
 653              		.loc 1 546 16 view .LVU182
 654              	.LBE6:
 554:nanopb/pb_encode.c ****     }
 555:nanopb/pb_encode.c ****     buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 655              		.loc 1 555 5 is_stmt 1 view .LVU183
 656              		.loc 1 555 17 is_stmt 0 view .LVU184
 657 0040 631E     		subs	r3, r4, #1
 658 0042 04AA     		add	r2, sp, #16
 659              	.LVL58:
 660              		.loc 1 555 17 view .LVU185
 661 0044 1344     		add	r3, r3, r2
 662 0046 13F80C2C 		ldrb	r2, [r3, #-12]	@ zero_extendqisi2
 663 004a 02F07F02 		and	r2, r2, #127
 664 004e 03F80C2C 		strb	r2, [r3, #-12]
 556:nanopb/pb_encode.c ****     
 557:nanopb/pb_encode.c ****     return pb_write(stream, buffer, i);
 665              		.loc 1 557 5 is_stmt 1 view .LVU186
 666              		.loc 1 557 12 is_stmt 0 view .LVU187
 667 0052 2246     		mov	r2, r4
 668 0054 01A9     		add	r1, sp, #4
 669 0056 FFF7FEFF 		bl	pb_write
 670              	.LVL59:
 671              	.L65:
 558:nanopb/pb_encode.c **** }
 672              		.loc 1 558 1 discriminator 1 view .LVU188
 673 005a 05B0     		add	sp, sp, #20
 674              	.LCFI13:
 675              		.cfi_def_cfa_offset 12
 676              		@ sp needed
 677 005c 30BD     		pop	{r4, r5, pc}
 678              		.cfi_endproc
 679              	.LFE15:
 681              		.section	.text.pb_enc_uvarint,"ax",%progbits
 682              		.align	1
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu softvfp
 688              	pb_enc_uvarint:
 689              	.LVL60:
 690              	.LFB24:
 559:nanopb/pb_encode.c **** 
 560:nanopb/pb_encode.c **** bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 25


 561:nanopb/pb_encode.c **** {
 562:nanopb/pb_encode.c ****     pb_uint64_t zigzagged;
 563:nanopb/pb_encode.c ****     if (value < 0)
 564:nanopb/pb_encode.c ****         zigzagged = ~((pb_uint64_t)value << 1);
 565:nanopb/pb_encode.c ****     else
 566:nanopb/pb_encode.c ****         zigzagged = (pb_uint64_t)value << 1;
 567:nanopb/pb_encode.c ****     
 568:nanopb/pb_encode.c ****     return pb_encode_varint(stream, zigzagged);
 569:nanopb/pb_encode.c **** }
 570:nanopb/pb_encode.c **** 
 571:nanopb/pb_encode.c **** bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
 572:nanopb/pb_encode.c **** {
 573:nanopb/pb_encode.c ****     uint32_t val = *(const uint32_t*)value;
 574:nanopb/pb_encode.c ****     pb_byte_t bytes[4];
 575:nanopb/pb_encode.c ****     bytes[0] = (pb_byte_t)(val & 0xFF);
 576:nanopb/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 577:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 578:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 579:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 4);
 580:nanopb/pb_encode.c **** }
 581:nanopb/pb_encode.c **** 
 582:nanopb/pb_encode.c **** #ifndef PB_WITHOUT_64BIT
 583:nanopb/pb_encode.c **** bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
 584:nanopb/pb_encode.c **** {
 585:nanopb/pb_encode.c ****     uint64_t val = *(const uint64_t*)value;
 586:nanopb/pb_encode.c ****     pb_byte_t bytes[8];
 587:nanopb/pb_encode.c ****     bytes[0] = (pb_byte_t)(val & 0xFF);
 588:nanopb/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 589:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 590:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 591:nanopb/pb_encode.c ****     bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 592:nanopb/pb_encode.c ****     bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 593:nanopb/pb_encode.c ****     bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 594:nanopb/pb_encode.c ****     bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 595:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 8);
 596:nanopb/pb_encode.c **** }
 597:nanopb/pb_encode.c **** #endif
 598:nanopb/pb_encode.c **** 
 599:nanopb/pb_encode.c **** bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number
 600:nanopb/pb_encode.c **** {
 601:nanopb/pb_encode.c ****     pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 602:nanopb/pb_encode.c ****     return pb_encode_varint(stream, tag);
 603:nanopb/pb_encode.c **** }
 604:nanopb/pb_encode.c **** 
 605:nanopb/pb_encode.c **** bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
 606:nanopb/pb_encode.c **** {
 607:nanopb/pb_encode.c ****     pb_wire_type_t wiretype;
 608:nanopb/pb_encode.c ****     switch (PB_LTYPE(field->type))
 609:nanopb/pb_encode.c ****     {
 610:nanopb/pb_encode.c ****         case PB_LTYPE_VARINT:
 611:nanopb/pb_encode.c ****         case PB_LTYPE_UVARINT:
 612:nanopb/pb_encode.c ****         case PB_LTYPE_SVARINT:
 613:nanopb/pb_encode.c ****             wiretype = PB_WT_VARINT;
 614:nanopb/pb_encode.c ****             break;
 615:nanopb/pb_encode.c ****         
 616:nanopb/pb_encode.c ****         case PB_LTYPE_FIXED32:
 617:nanopb/pb_encode.c ****             wiretype = PB_WT_32BIT;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 26


 618:nanopb/pb_encode.c ****             break;
 619:nanopb/pb_encode.c ****         
 620:nanopb/pb_encode.c ****         case PB_LTYPE_FIXED64:
 621:nanopb/pb_encode.c ****             wiretype = PB_WT_64BIT;
 622:nanopb/pb_encode.c ****             break;
 623:nanopb/pb_encode.c ****         
 624:nanopb/pb_encode.c ****         case PB_LTYPE_BYTES:
 625:nanopb/pb_encode.c ****         case PB_LTYPE_STRING:
 626:nanopb/pb_encode.c ****         case PB_LTYPE_SUBMESSAGE:
 627:nanopb/pb_encode.c ****         case PB_LTYPE_FIXED_LENGTH_BYTES:
 628:nanopb/pb_encode.c ****             wiretype = PB_WT_STRING;
 629:nanopb/pb_encode.c ****             break;
 630:nanopb/pb_encode.c ****         
 631:nanopb/pb_encode.c ****         default:
 632:nanopb/pb_encode.c ****             PB_RETURN_ERROR(stream, "invalid field type");
 633:nanopb/pb_encode.c ****     }
 634:nanopb/pb_encode.c ****     
 635:nanopb/pb_encode.c ****     return pb_encode_tag(stream, wiretype, field->tag);
 636:nanopb/pb_encode.c **** }
 637:nanopb/pb_encode.c **** 
 638:nanopb/pb_encode.c **** bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
 639:nanopb/pb_encode.c **** {
 640:nanopb/pb_encode.c ****     if (!pb_encode_varint(stream, (pb_uint64_t)size))
 641:nanopb/pb_encode.c ****         return false;
 642:nanopb/pb_encode.c ****     
 643:nanopb/pb_encode.c ****     return pb_write(stream, buffer, size);
 644:nanopb/pb_encode.c **** }
 645:nanopb/pb_encode.c **** 
 646:nanopb/pb_encode.c **** bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *
 647:nanopb/pb_encode.c **** {
 648:nanopb/pb_encode.c ****     /* First calculate the message size using a non-writing substream. */
 649:nanopb/pb_encode.c ****     pb_ostream_t substream = PB_OSTREAM_SIZING;
 650:nanopb/pb_encode.c ****     size_t size;
 651:nanopb/pb_encode.c ****     bool status;
 652:nanopb/pb_encode.c ****     
 653:nanopb/pb_encode.c ****     if (!pb_encode(&substream, fields, src_struct))
 654:nanopb/pb_encode.c ****     {
 655:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 656:nanopb/pb_encode.c ****         stream->errmsg = substream.errmsg;
 657:nanopb/pb_encode.c **** #endif
 658:nanopb/pb_encode.c ****         return false;
 659:nanopb/pb_encode.c ****     }
 660:nanopb/pb_encode.c ****     
 661:nanopb/pb_encode.c ****     size = substream.bytes_written;
 662:nanopb/pb_encode.c ****     
 663:nanopb/pb_encode.c ****     if (!pb_encode_varint(stream, (pb_uint64_t)size))
 664:nanopb/pb_encode.c ****         return false;
 665:nanopb/pb_encode.c ****     
 666:nanopb/pb_encode.c ****     if (stream->callback == NULL)
 667:nanopb/pb_encode.c ****         return pb_write(stream, NULL, size); /* Just sizing */
 668:nanopb/pb_encode.c ****     
 669:nanopb/pb_encode.c ****     if (stream->bytes_written + size > stream->max_size)
 670:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "stream full");
 671:nanopb/pb_encode.c ****         
 672:nanopb/pb_encode.c ****     /* Use a substream to verify that a callback doesn't write more than
 673:nanopb/pb_encode.c ****      * what it did the first time. */
 674:nanopb/pb_encode.c ****     substream.callback = stream->callback;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 27


 675:nanopb/pb_encode.c ****     substream.state = stream->state;
 676:nanopb/pb_encode.c ****     substream.max_size = size;
 677:nanopb/pb_encode.c ****     substream.bytes_written = 0;
 678:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 679:nanopb/pb_encode.c ****     substream.errmsg = NULL;
 680:nanopb/pb_encode.c **** #endif
 681:nanopb/pb_encode.c ****     
 682:nanopb/pb_encode.c ****     status = pb_encode(&substream, fields, src_struct);
 683:nanopb/pb_encode.c ****     
 684:nanopb/pb_encode.c ****     stream->bytes_written += substream.bytes_written;
 685:nanopb/pb_encode.c ****     stream->state = substream.state;
 686:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 687:nanopb/pb_encode.c ****     stream->errmsg = substream.errmsg;
 688:nanopb/pb_encode.c **** #endif
 689:nanopb/pb_encode.c ****     
 690:nanopb/pb_encode.c ****     if (substream.bytes_written != size)
 691:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "submsg size changed");
 692:nanopb/pb_encode.c ****     
 693:nanopb/pb_encode.c ****     return status;
 694:nanopb/pb_encode.c **** }
 695:nanopb/pb_encode.c **** 
 696:nanopb/pb_encode.c **** /* Field encoders */
 697:nanopb/pb_encode.c **** 
 698:nanopb/pb_encode.c **** static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *sr
 699:nanopb/pb_encode.c **** {
 700:nanopb/pb_encode.c ****     pb_int64_t value = 0;
 701:nanopb/pb_encode.c ****     
 702:nanopb/pb_encode.c ****     if (field->data_size == sizeof(int_least8_t))
 703:nanopb/pb_encode.c ****         value = *(const int_least8_t*)src;
 704:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 705:nanopb/pb_encode.c ****         value = *(const int_least16_t*)src;
 706:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 707:nanopb/pb_encode.c ****         value = *(const int32_t*)src;
 708:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 709:nanopb/pb_encode.c ****         value = *(const pb_int64_t*)src;
 710:nanopb/pb_encode.c ****     else
 711:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid data_size");
 712:nanopb/pb_encode.c ****     
 713:nanopb/pb_encode.c ****     return pb_encode_varint(stream, (pb_uint64_t)value);
 714:nanopb/pb_encode.c **** }
 715:nanopb/pb_encode.c **** 
 716:nanopb/pb_encode.c **** static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *s
 717:nanopb/pb_encode.c **** {
 691              		.loc 1 717 1 is_stmt 1 view -0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              		.loc 1 717 1 is_stmt 0 view .LVU190
 696 0000 08B5     		push	{r3, lr}
 697              	.LCFI14:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 3, -8
 700              		.cfi_offset 14, -4
 718:nanopb/pb_encode.c ****     pb_uint64_t value = 0;
 701              		.loc 1 718 5 is_stmt 1 view .LVU191
 702              	.LVL61:
 719:nanopb/pb_encode.c ****     
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 28


 720:nanopb/pb_encode.c ****     if (field->data_size == sizeof(uint_least8_t))
 703              		.loc 1 720 5 view .LVU192
 704              		.loc 1 720 14 is_stmt 0 view .LVU193
 705 0002 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 706              		.loc 1 720 8 view .LVU194
 707 0004 012B     		cmp	r3, #1
 708 0006 07D0     		beq	.L80
 721:nanopb/pb_encode.c ****         value = *(const uint_least8_t*)src;
 722:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint_least16_t))
 709              		.loc 1 722 10 is_stmt 1 view .LVU195
 710              		.loc 1 722 13 is_stmt 0 view .LVU196
 711 0008 022B     		cmp	r3, #2
 712 000a 0AD0     		beq	.L81
 723:nanopb/pb_encode.c ****         value = *(const uint_least16_t*)src;
 724:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint32_t))
 713              		.loc 1 724 10 is_stmt 1 view .LVU197
 714              		.loc 1 724 13 is_stmt 0 view .LVU198
 715 000c 042B     		cmp	r3, #4
 716 000e 0BD0     		beq	.L82
 725:nanopb/pb_encode.c ****         value = *(const uint32_t*)src;
 726:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_uint64_t))
 717              		.loc 1 726 10 is_stmt 1 view .LVU199
 718              		.loc 1 726 13 is_stmt 0 view .LVU200
 719 0010 082B     		cmp	r3, #8
 720 0012 0CD1     		bne	.L76
 727:nanopb/pb_encode.c ****         value = *(const pb_uint64_t*)src;
 721              		.loc 1 727 9 is_stmt 1 view .LVU201
 722              		.loc 1 727 15 is_stmt 0 view .LVU202
 723 0014 0CCA     		ldmia	r2, {r2-r3}
 724              	.LVL62:
 725              		.loc 1 727 15 view .LVU203
 726 0016 01E0     		b	.L73
 727              	.LVL63:
 728              	.L80:
 721:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint_least16_t))
 729              		.loc 1 721 9 is_stmt 1 view .LVU204
 721:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint_least16_t))
 730              		.loc 1 721 15 is_stmt 0 view .LVU205
 731 0018 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 732              	.LVL64:
 721:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint_least16_t))
 733              		.loc 1 721 15 view .LVU206
 734 001a 0023     		movs	r3, #0
 735              	.LVL65:
 736              	.L73:
 728:nanopb/pb_encode.c ****     else
 729:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid data_size");
 730:nanopb/pb_encode.c ****     
 731:nanopb/pb_encode.c ****     return pb_encode_varint(stream, value);
 737              		.loc 1 731 5 is_stmt 1 view .LVU207
 738              		.loc 1 731 12 is_stmt 0 view .LVU208
 739 001c FFF7FEFF 		bl	pb_encode_varint
 740              	.LVL66:
 741              	.L78:
 732:nanopb/pb_encode.c **** }
 742              		.loc 1 732 1 view .LVU209
 743 0020 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 29


 744              	.LVL67:
 745              	.L81:
 723:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint32_t))
 746              		.loc 1 723 9 is_stmt 1 view .LVU210
 723:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint32_t))
 747              		.loc 1 723 15 is_stmt 0 view .LVU211
 748 0022 1288     		ldrh	r2, [r2]
 749              	.LVL68:
 723:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint32_t))
 750              		.loc 1 723 15 view .LVU212
 751 0024 0023     		movs	r3, #0
 752              	.LVL69:
 723:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(uint32_t))
 753              		.loc 1 723 15 view .LVU213
 754 0026 F9E7     		b	.L73
 755              	.LVL70:
 756              	.L82:
 725:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_uint64_t))
 757              		.loc 1 725 9 is_stmt 1 view .LVU214
 725:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_uint64_t))
 758              		.loc 1 725 17 is_stmt 0 view .LVU215
 759 0028 1268     		ldr	r2, [r2]
 760              	.LVL71:
 725:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_uint64_t))
 761              		.loc 1 725 15 view .LVU216
 762 002a 0023     		movs	r3, #0
 763              	.LVL72:
 725:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_uint64_t))
 764              		.loc 1 725 15 view .LVU217
 765 002c F6E7     		b	.L73
 766              	.LVL73:
 767              	.L76:
 729:nanopb/pb_encode.c ****     
 768              		.loc 1 729 9 is_stmt 1 view .LVU218
 769 002e 0369     		ldr	r3, [r0, #16]
 770 0030 13B1     		cbz	r3, .L83
 771              	.L77:
 729:nanopb/pb_encode.c ****     
 772              		.loc 1 729 9 is_stmt 0 discriminator 4 view .LVU219
 773 0032 0361     		str	r3, [r0, #16]
 774 0034 0020     		movs	r0, #0
 775              	.LVL74:
 729:nanopb/pb_encode.c ****     
 776              		.loc 1 729 9 discriminator 4 view .LVU220
 777 0036 F3E7     		b	.L78
 778              	.LVL75:
 779              	.L83:
 729:nanopb/pb_encode.c ****     
 780              		.loc 1 729 9 view .LVU221
 781 0038 004B     		ldr	r3, .L84
 782 003a FAE7     		b	.L77
 783              	.L85:
 784              		.align	2
 785              	.L84:
 786 003c 00000000 		.word	.LC3
 787              		.cfi_endproc
 788              	.LFE24:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 30


 790              		.section	.text.pb_enc_varint,"ax",%progbits
 791              		.align	1
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu softvfp
 797              	pb_enc_varint:
 798              	.LVL76:
 799              	.LFB23:
 699:nanopb/pb_encode.c ****     pb_int64_t value = 0;
 800              		.loc 1 699 1 is_stmt 1 view -0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 699:nanopb/pb_encode.c ****     pb_int64_t value = 0;
 804              		.loc 1 699 1 is_stmt 0 view .LVU223
 805 0000 08B5     		push	{r3, lr}
 806              	.LCFI15:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 3, -8
 809              		.cfi_offset 14, -4
 700:nanopb/pb_encode.c ****     
 810              		.loc 1 700 5 is_stmt 1 view .LVU224
 811              	.LVL77:
 702:nanopb/pb_encode.c ****         value = *(const int_least8_t*)src;
 812              		.loc 1 702 5 view .LVU225
 702:nanopb/pb_encode.c ****         value = *(const int_least8_t*)src;
 813              		.loc 1 702 14 is_stmt 0 view .LVU226
 814 0002 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 702:nanopb/pb_encode.c ****         value = *(const int_least8_t*)src;
 815              		.loc 1 702 8 view .LVU227
 816 0004 012B     		cmp	r3, #1
 817 0006 07D0     		beq	.L95
 704:nanopb/pb_encode.c ****         value = *(const int_least16_t*)src;
 818              		.loc 1 704 10 is_stmt 1 view .LVU228
 704:nanopb/pb_encode.c ****         value = *(const int_least16_t*)src;
 819              		.loc 1 704 13 is_stmt 0 view .LVU229
 820 0008 022B     		cmp	r3, #2
 821 000a 0BD0     		beq	.L96
 706:nanopb/pb_encode.c ****         value = *(const int32_t*)src;
 822              		.loc 1 706 10 is_stmt 1 view .LVU230
 706:nanopb/pb_encode.c ****         value = *(const int32_t*)src;
 823              		.loc 1 706 13 is_stmt 0 view .LVU231
 824 000c 042B     		cmp	r3, #4
 825 000e 0DD0     		beq	.L97
 708:nanopb/pb_encode.c ****         value = *(const pb_int64_t*)src;
 826              		.loc 1 708 10 is_stmt 1 view .LVU232
 708:nanopb/pb_encode.c ****         value = *(const pb_int64_t*)src;
 827              		.loc 1 708 13 is_stmt 0 view .LVU233
 828 0010 082B     		cmp	r3, #8
 829 0012 0ED1     		bne	.L91
 709:nanopb/pb_encode.c ****     else
 830              		.loc 1 709 9 is_stmt 1 view .LVU234
 709:nanopb/pb_encode.c ****     else
 831              		.loc 1 709 15 is_stmt 0 view .LVU235
 832 0014 0CCA     		ldmia	r2, {r2-r3}
 833              	.LVL78:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 31


 709:nanopb/pb_encode.c ****     else
 834              		.loc 1 709 15 view .LVU236
 835 0016 02E0     		b	.L88
 836              	.LVL79:
 837              	.L95:
 703:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 838              		.loc 1 703 9 is_stmt 1 view .LVU237
 703:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 839              		.loc 1 703 15 is_stmt 0 view .LVU238
 840 0018 92F90020 		ldrsb	r2, [r2]
 841              	.LVL80:
 703:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 842              		.loc 1 703 15 view .LVU239
 843 001c D317     		asrs	r3, r2, #31
 844              	.LVL81:
 845              	.L88:
 713:nanopb/pb_encode.c **** }
 846              		.loc 1 713 5 is_stmt 1 view .LVU240
 713:nanopb/pb_encode.c **** }
 847              		.loc 1 713 12 is_stmt 0 view .LVU241
 848 001e FFF7FEFF 		bl	pb_encode_varint
 849              	.LVL82:
 850              	.L93:
 714:nanopb/pb_encode.c **** 
 851              		.loc 1 714 1 view .LVU242
 852 0022 08BD     		pop	{r3, pc}
 853              	.LVL83:
 854              	.L96:
 705:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 855              		.loc 1 705 9 is_stmt 1 view .LVU243
 705:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 856              		.loc 1 705 15 is_stmt 0 view .LVU244
 857 0024 B2F90020 		ldrsh	r2, [r2]
 858              	.LVL84:
 705:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 859              		.loc 1 705 15 view .LVU245
 860 0028 D317     		asrs	r3, r2, #31
 861              	.LVL85:
 705:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 862              		.loc 1 705 15 view .LVU246
 863 002a F8E7     		b	.L88
 864              	.LVL86:
 865              	.L97:
 707:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 866              		.loc 1 707 9 is_stmt 1 view .LVU247
 707:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 867              		.loc 1 707 17 is_stmt 0 view .LVU248
 868 002c 1268     		ldr	r2, [r2]
 869              	.LVL87:
 707:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 870              		.loc 1 707 15 view .LVU249
 871 002e D317     		asrs	r3, r2, #31
 872              	.LVL88:
 707:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 873              		.loc 1 707 15 view .LVU250
 874 0030 F5E7     		b	.L88
 875              	.LVL89:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 32


 876              	.L91:
 711:nanopb/pb_encode.c ****     
 877              		.loc 1 711 9 is_stmt 1 view .LVU251
 878 0032 0369     		ldr	r3, [r0, #16]
 879 0034 13B1     		cbz	r3, .L98
 880              	.L92:
 711:nanopb/pb_encode.c ****     
 881              		.loc 1 711 9 is_stmt 0 discriminator 4 view .LVU252
 882 0036 0361     		str	r3, [r0, #16]
 883 0038 0020     		movs	r0, #0
 884              	.LVL90:
 711:nanopb/pb_encode.c ****     
 885              		.loc 1 711 9 discriminator 4 view .LVU253
 886 003a F2E7     		b	.L93
 887              	.LVL91:
 888              	.L98:
 711:nanopb/pb_encode.c ****     
 889              		.loc 1 711 9 view .LVU254
 890 003c 004B     		ldr	r3, .L99
 891 003e FAE7     		b	.L92
 892              	.L100:
 893              		.align	2
 894              	.L99:
 895 0040 00000000 		.word	.LC3
 896              		.cfi_endproc
 897              	.LFE23:
 899              		.section	.text.pb_encode_svarint,"ax",%progbits
 900              		.align	1
 901              		.global	pb_encode_svarint
 902              		.syntax unified
 903              		.thumb
 904              		.thumb_func
 905              		.fpu softvfp
 907              	pb_encode_svarint:
 908              	.LVL92:
 909              	.LFB16:
 561:nanopb/pb_encode.c ****     pb_uint64_t zigzagged;
 910              		.loc 1 561 1 is_stmt 1 view -0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 0
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 561:nanopb/pb_encode.c ****     pb_uint64_t zigzagged;
 914              		.loc 1 561 1 is_stmt 0 view .LVU256
 915 0000 2DE90048 		push	{fp, lr}
 916              	.LCFI16:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 11, -8
 919              		.cfi_offset 14, -4
 920 0004 9C46     		mov	ip, r3
 562:nanopb/pb_encode.c ****     if (value < 0)
 921              		.loc 1 562 5 is_stmt 1 view .LVU257
 563:nanopb/pb_encode.c ****         zigzagged = ~((pb_uint64_t)value << 1);
 922              		.loc 1 563 5 view .LVU258
 563:nanopb/pb_encode.c ****         zigzagged = ~((pb_uint64_t)value << 1);
 923              		.loc 1 563 8 is_stmt 0 view .LVU259
 924 0006 002A     		cmp	r2, #0
 925 0008 73F10003 		sbcs	r3, r3, #0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 33


 926 000c 06DB     		blt	.L105
 566:nanopb/pb_encode.c ****     
 927              		.loc 1 566 9 is_stmt 1 view .LVU260
 566:nanopb/pb_encode.c ****     
 928              		.loc 1 566 19 is_stmt 0 view .LVU261
 929 000e 9218     		adds	r2, r2, r2
 930              	.LVL93:
 566:nanopb/pb_encode.c ****     
 931              		.loc 1 566 19 view .LVU262
 932 0010 4CEB0C03 		adc	r3, ip, ip
 933              	.LVL94:
 934              	.L103:
 568:nanopb/pb_encode.c **** }
 935              		.loc 1 568 5 is_stmt 1 view .LVU263
 568:nanopb/pb_encode.c **** }
 936              		.loc 1 568 12 is_stmt 0 view .LVU264
 937 0014 FFF7FEFF 		bl	pb_encode_varint
 938              	.LVL95:
 569:nanopb/pb_encode.c **** 
 939              		.loc 1 569 1 view .LVU265
 940 0018 BDE80088 		pop	{fp, pc}
 941              	.LVL96:
 942              	.L105:
 564:nanopb/pb_encode.c ****     else
 943              		.loc 1 564 9 is_stmt 1 view .LVU266
 564:nanopb/pb_encode.c ****     else
 944              		.loc 1 564 42 is_stmt 0 view .LVU267
 945 001c 9218     		adds	r2, r2, r2
 946              	.LVL97:
 564:nanopb/pb_encode.c ****     else
 947              		.loc 1 564 42 view .LVU268
 948 001e 4CEB0C03 		adc	r3, ip, ip
 564:nanopb/pb_encode.c ****     else
 949              		.loc 1 564 19 view .LVU269
 950 0022 D243     		mvns	r2, r2
 951 0024 DB43     		mvns	r3, r3
 952              	.LVL98:
 564:nanopb/pb_encode.c ****     else
 953              		.loc 1 564 19 view .LVU270
 954 0026 F5E7     		b	.L103
 955              		.cfi_endproc
 956              	.LFE16:
 958              		.section	.text.pb_enc_svarint,"ax",%progbits
 959              		.align	1
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu softvfp
 965              	pb_enc_svarint:
 966              	.LVL99:
 967              	.LFB25:
 733:nanopb/pb_encode.c **** 
 734:nanopb/pb_encode.c **** static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *s
 735:nanopb/pb_encode.c **** {
 968              		.loc 1 735 1 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 34


 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              		.loc 1 735 1 is_stmt 0 view .LVU272
 973 0000 08B5     		push	{r3, lr}
 974              	.LCFI17:
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 3, -8
 977              		.cfi_offset 14, -4
 736:nanopb/pb_encode.c ****     pb_int64_t value = 0;
 978              		.loc 1 736 5 is_stmt 1 view .LVU273
 979              	.LVL100:
 737:nanopb/pb_encode.c ****     
 738:nanopb/pb_encode.c ****     if (field->data_size == sizeof(int_least8_t))
 980              		.loc 1 738 5 view .LVU274
 981              		.loc 1 738 14 is_stmt 0 view .LVU275
 982 0002 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 983              		.loc 1 738 8 view .LVU276
 984 0004 012B     		cmp	r3, #1
 985 0006 07D0     		beq	.L115
 739:nanopb/pb_encode.c ****         value = *(const int_least8_t*)src;
 740:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 986              		.loc 1 740 10 is_stmt 1 view .LVU277
 987              		.loc 1 740 13 is_stmt 0 view .LVU278
 988 0008 022B     		cmp	r3, #2
 989 000a 0BD0     		beq	.L116
 741:nanopb/pb_encode.c ****         value = *(const int_least16_t*)src;
 742:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 990              		.loc 1 742 10 is_stmt 1 view .LVU279
 991              		.loc 1 742 13 is_stmt 0 view .LVU280
 992 000c 042B     		cmp	r3, #4
 993 000e 0DD0     		beq	.L117
 743:nanopb/pb_encode.c ****         value = *(const int32_t*)src;
 744:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 994              		.loc 1 744 10 is_stmt 1 view .LVU281
 995              		.loc 1 744 13 is_stmt 0 view .LVU282
 996 0010 082B     		cmp	r3, #8
 997 0012 0ED1     		bne	.L111
 745:nanopb/pb_encode.c ****         value = *(const pb_int64_t*)src;
 998              		.loc 1 745 9 is_stmt 1 view .LVU283
 999              		.loc 1 745 15 is_stmt 0 view .LVU284
 1000 0014 0CCA     		ldmia	r2, {r2-r3}
 1001              	.LVL101:
 1002              		.loc 1 745 15 view .LVU285
 1003 0016 02E0     		b	.L108
 1004              	.LVL102:
 1005              	.L115:
 739:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 1006              		.loc 1 739 9 is_stmt 1 view .LVU286
 739:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 1007              		.loc 1 739 15 is_stmt 0 view .LVU287
 1008 0018 92F90020 		ldrsb	r2, [r2]
 1009              	.LVL103:
 739:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int_least16_t))
 1010              		.loc 1 739 15 view .LVU288
 1011 001c D317     		asrs	r3, r2, #31
 1012              	.LVL104:
 1013              	.L108:
 746:nanopb/pb_encode.c ****     else
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 35


 747:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid data_size");
 748:nanopb/pb_encode.c ****     
 749:nanopb/pb_encode.c ****     return pb_encode_svarint(stream, value);
 1014              		.loc 1 749 5 is_stmt 1 view .LVU289
 1015              		.loc 1 749 12 is_stmt 0 view .LVU290
 1016 001e FFF7FEFF 		bl	pb_encode_svarint
 1017              	.LVL105:
 1018              	.L113:
 750:nanopb/pb_encode.c **** }
 1019              		.loc 1 750 1 view .LVU291
 1020 0022 08BD     		pop	{r3, pc}
 1021              	.LVL106:
 1022              	.L116:
 741:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 1023              		.loc 1 741 9 is_stmt 1 view .LVU292
 741:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 1024              		.loc 1 741 15 is_stmt 0 view .LVU293
 1025 0024 B2F90020 		ldrsh	r2, [r2]
 1026              	.LVL107:
 741:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 1027              		.loc 1 741 15 view .LVU294
 1028 0028 D317     		asrs	r3, r2, #31
 1029              	.LVL108:
 741:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(int32_t))
 1030              		.loc 1 741 15 view .LVU295
 1031 002a F8E7     		b	.L108
 1032              	.LVL109:
 1033              	.L117:
 743:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 1034              		.loc 1 743 9 is_stmt 1 view .LVU296
 743:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 1035              		.loc 1 743 17 is_stmt 0 view .LVU297
 1036 002c 1268     		ldr	r2, [r2]
 1037              	.LVL110:
 743:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 1038              		.loc 1 743 15 view .LVU298
 1039 002e D317     		asrs	r3, r2, #31
 1040              	.LVL111:
 743:nanopb/pb_encode.c ****     else if (field->data_size == sizeof(pb_int64_t))
 1041              		.loc 1 743 15 view .LVU299
 1042 0030 F5E7     		b	.L108
 1043              	.LVL112:
 1044              	.L111:
 747:nanopb/pb_encode.c ****     
 1045              		.loc 1 747 9 is_stmt 1 view .LVU300
 1046 0032 0369     		ldr	r3, [r0, #16]
 1047 0034 13B1     		cbz	r3, .L118
 1048              	.L112:
 747:nanopb/pb_encode.c ****     
 1049              		.loc 1 747 9 is_stmt 0 discriminator 4 view .LVU301
 1050 0036 0361     		str	r3, [r0, #16]
 1051 0038 0020     		movs	r0, #0
 1052              	.LVL113:
 747:nanopb/pb_encode.c ****     
 1053              		.loc 1 747 9 discriminator 4 view .LVU302
 1054 003a F2E7     		b	.L113
 1055              	.LVL114:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 36


 1056              	.L118:
 747:nanopb/pb_encode.c ****     
 1057              		.loc 1 747 9 view .LVU303
 1058 003c 004B     		ldr	r3, .L119
 1059 003e FAE7     		b	.L112
 1060              	.L120:
 1061              		.align	2
 1062              	.L119:
 1063 0040 00000000 		.word	.LC3
 1064              		.cfi_endproc
 1065              	.LFE25:
 1067              		.section	.text.pb_encode_fixed32,"ax",%progbits
 1068              		.align	1
 1069              		.global	pb_encode_fixed32
 1070              		.syntax unified
 1071              		.thumb
 1072              		.thumb_func
 1073              		.fpu softvfp
 1075              	pb_encode_fixed32:
 1076              	.LVL115:
 1077              	.LFB17:
 572:nanopb/pb_encode.c ****     uint32_t val = *(const uint32_t*)value;
 1078              		.loc 1 572 1 is_stmt 1 view -0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 8
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 572:nanopb/pb_encode.c ****     uint32_t val = *(const uint32_t*)value;
 1082              		.loc 1 572 1 is_stmt 0 view .LVU305
 1083 0000 00B5     		push	{lr}
 1084              	.LCFI18:
 1085              		.cfi_def_cfa_offset 4
 1086              		.cfi_offset 14, -4
 1087 0002 83B0     		sub	sp, sp, #12
 1088              	.LCFI19:
 1089              		.cfi_def_cfa_offset 16
 573:nanopb/pb_encode.c ****     pb_byte_t bytes[4];
 1090              		.loc 1 573 5 is_stmt 1 view .LVU306
 573:nanopb/pb_encode.c ****     pb_byte_t bytes[4];
 1091              		.loc 1 573 14 is_stmt 0 view .LVU307
 1092 0004 0B68     		ldr	r3, [r1]
 1093              	.LVL116:
 574:nanopb/pb_encode.c ****     bytes[0] = (pb_byte_t)(val & 0xFF);
 1094              		.loc 1 574 5 is_stmt 1 view .LVU308
 575:nanopb/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 1095              		.loc 1 575 5 view .LVU309
 575:nanopb/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 1096              		.loc 1 575 14 is_stmt 0 view .LVU310
 1097 0006 8DF80430 		strb	r3, [sp, #4]
 576:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 1098              		.loc 1 576 5 is_stmt 1 view .LVU311
 576:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 1099              		.loc 1 576 16 is_stmt 0 view .LVU312
 1100 000a C3F30722 		ubfx	r2, r3, #8, #8
 576:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 1101              		.loc 1 576 14 view .LVU313
 1102 000e 8DF80520 		strb	r2, [sp, #5]
 577:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 37


 1103              		.loc 1 577 5 is_stmt 1 view .LVU314
 577:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 1104              		.loc 1 577 16 is_stmt 0 view .LVU315
 1105 0012 C3F30742 		ubfx	r2, r3, #16, #8
 577:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 1106              		.loc 1 577 14 view .LVU316
 1107 0016 8DF80620 		strb	r2, [sp, #6]
 578:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 4);
 1108              		.loc 1 578 5 is_stmt 1 view .LVU317
 578:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 4);
 1109              		.loc 1 578 16 is_stmt 0 view .LVU318
 1110 001a 1B0E     		lsrs	r3, r3, #24
 1111              	.LVL117:
 578:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 4);
 1112              		.loc 1 578 14 view .LVU319
 1113 001c 8DF80730 		strb	r3, [sp, #7]
 579:nanopb/pb_encode.c **** }
 1114              		.loc 1 579 5 is_stmt 1 view .LVU320
 579:nanopb/pb_encode.c **** }
 1115              		.loc 1 579 12 is_stmt 0 view .LVU321
 1116 0020 0422     		movs	r2, #4
 1117 0022 0DEB0201 		add	r1, sp, r2
 1118              	.LVL118:
 579:nanopb/pb_encode.c **** }
 1119              		.loc 1 579 12 view .LVU322
 1120 0026 FFF7FEFF 		bl	pb_write
 1121              	.LVL119:
 580:nanopb/pb_encode.c **** 
 1122              		.loc 1 580 1 view .LVU323
 1123 002a 03B0     		add	sp, sp, #12
 1124              	.LCFI20:
 1125              		.cfi_def_cfa_offset 4
 1126              		@ sp needed
 1127 002c 5DF804FB 		ldr	pc, [sp], #4
 1128              		.cfi_endproc
 1129              	.LFE17:
 1131              		.section	.text.pb_enc_fixed32,"ax",%progbits
 1132              		.align	1
 1133              		.syntax unified
 1134              		.thumb
 1135              		.thumb_func
 1136              		.fpu softvfp
 1138              	pb_enc_fixed32:
 1139              	.LVL120:
 1140              	.LFB27:
 751:nanopb/pb_encode.c **** 
 752:nanopb/pb_encode.c **** static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *s
 753:nanopb/pb_encode.c **** {
 754:nanopb/pb_encode.c ****     PB_UNUSED(field);
 755:nanopb/pb_encode.c **** #ifndef PB_WITHOUT_64BIT
 756:nanopb/pb_encode.c ****     return pb_encode_fixed64(stream, src);
 757:nanopb/pb_encode.c **** #else
 758:nanopb/pb_encode.c ****     PB_UNUSED(src);
 759:nanopb/pb_encode.c ****     PB_RETURN_ERROR(stream, "no 64bit support");
 760:nanopb/pb_encode.c **** #endif
 761:nanopb/pb_encode.c **** }
 762:nanopb/pb_encode.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 38


 763:nanopb/pb_encode.c **** static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *s
 764:nanopb/pb_encode.c **** {
 1141              		.loc 1 764 1 is_stmt 1 view -0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		.loc 1 764 1 is_stmt 0 view .LVU325
 1146 0000 08B5     		push	{r3, lr}
 1147              	.LCFI21:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 3, -8
 1150              		.cfi_offset 14, -4
 765:nanopb/pb_encode.c ****     PB_UNUSED(field);
 1151              		.loc 1 765 5 is_stmt 1 view .LVU326
 766:nanopb/pb_encode.c ****     return pb_encode_fixed32(stream, src);
 1152              		.loc 1 766 5 view .LVU327
 1153              		.loc 1 766 12 is_stmt 0 view .LVU328
 1154 0002 1146     		mov	r1, r2
 1155              	.LVL121:
 1156              		.loc 1 766 12 view .LVU329
 1157 0004 FFF7FEFF 		bl	pb_encode_fixed32
 1158              	.LVL122:
 767:nanopb/pb_encode.c **** }
 1159              		.loc 1 767 1 view .LVU330
 1160 0008 08BD     		pop	{r3, pc}
 1161              		.cfi_endproc
 1162              	.LFE27:
 1164              		.section	.text.pb_encode_fixed64,"ax",%progbits
 1165              		.align	1
 1166              		.global	pb_encode_fixed64
 1167              		.syntax unified
 1168              		.thumb
 1169              		.thumb_func
 1170              		.fpu softvfp
 1172              	pb_encode_fixed64:
 1173              	.LVL123:
 1174              	.LFB18:
 584:nanopb/pb_encode.c ****     uint64_t val = *(const uint64_t*)value;
 1175              		.loc 1 584 1 is_stmt 1 view -0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 8
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 584:nanopb/pb_encode.c ****     uint64_t val = *(const uint64_t*)value;
 1179              		.loc 1 584 1 is_stmt 0 view .LVU332
 1180 0000 00B5     		push	{lr}
 1181              	.LCFI22:
 1182              		.cfi_def_cfa_offset 4
 1183              		.cfi_offset 14, -4
 1184 0002 83B0     		sub	sp, sp, #12
 1185              	.LCFI23:
 1186              		.cfi_def_cfa_offset 16
 585:nanopb/pb_encode.c ****     pb_byte_t bytes[8];
 1187              		.loc 1 585 5 is_stmt 1 view .LVU333
 585:nanopb/pb_encode.c ****     pb_byte_t bytes[8];
 1188              		.loc 1 585 14 is_stmt 0 view .LVU334
 1189 0004 0A68     		ldr	r2, [r1]
 1190 0006 4B68     		ldr	r3, [r1, #4]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 39


 1191              	.LVL124:
 586:nanopb/pb_encode.c ****     bytes[0] = (pb_byte_t)(val & 0xFF);
 1192              		.loc 1 586 5 is_stmt 1 view .LVU335
 587:nanopb/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 1193              		.loc 1 587 5 view .LVU336
 587:nanopb/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 1194              		.loc 1 587 14 is_stmt 0 view .LVU337
 1195 0008 8DF80020 		strb	r2, [sp]
 588:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 1196              		.loc 1 588 5 is_stmt 1 view .LVU338
 588:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 1197              		.loc 1 588 16 is_stmt 0 view .LVU339
 1198 000c C2F30721 		ubfx	r1, r2, #8, #8
 1199              	.LVL125:
 588:nanopb/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 1200              		.loc 1 588 14 view .LVU340
 1201 0010 8DF80110 		strb	r1, [sp, #1]
 589:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 1202              		.loc 1 589 5 is_stmt 1 view .LVU341
 589:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 1203              		.loc 1 589 16 is_stmt 0 view .LVU342
 1204 0014 C2F30741 		ubfx	r1, r2, #16, #8
 589:nanopb/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 1205              		.loc 1 589 14 view .LVU343
 1206 0018 8DF80210 		strb	r1, [sp, #2]
 590:nanopb/pb_encode.c ****     bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 1207              		.loc 1 590 5 is_stmt 1 view .LVU344
 590:nanopb/pb_encode.c ****     bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 1208              		.loc 1 590 16 is_stmt 0 view .LVU345
 1209 001c 120E     		lsrs	r2, r2, #24
 1210              	.LVL126:
 590:nanopb/pb_encode.c ****     bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 1211              		.loc 1 590 14 view .LVU346
 1212 001e 8DF80320 		strb	r2, [sp, #3]
 591:nanopb/pb_encode.c ****     bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 1213              		.loc 1 591 5 is_stmt 1 view .LVU347
 591:nanopb/pb_encode.c ****     bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 1214              		.loc 1 591 14 is_stmt 0 view .LVU348
 1215 0022 8DF80430 		strb	r3, [sp, #4]
 592:nanopb/pb_encode.c ****     bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 1216              		.loc 1 592 5 is_stmt 1 view .LVU349
 592:nanopb/pb_encode.c ****     bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 1217              		.loc 1 592 16 is_stmt 0 view .LVU350
 1218 0026 C3F30722 		ubfx	r2, r3, #8, #8
 592:nanopb/pb_encode.c ****     bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 1219              		.loc 1 592 14 view .LVU351
 1220 002a 8DF80520 		strb	r2, [sp, #5]
 593:nanopb/pb_encode.c ****     bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 1221              		.loc 1 593 5 is_stmt 1 view .LVU352
 593:nanopb/pb_encode.c ****     bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 1222              		.loc 1 593 16 is_stmt 0 view .LVU353
 1223 002e C3F30742 		ubfx	r2, r3, #16, #8
 593:nanopb/pb_encode.c ****     bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 1224              		.loc 1 593 14 view .LVU354
 1225 0032 8DF80620 		strb	r2, [sp, #6]
 594:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 8);
 1226              		.loc 1 594 5 is_stmt 1 view .LVU355
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 40


 594:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 8);
 1227              		.loc 1 594 16 is_stmt 0 view .LVU356
 1228 0036 1B0E     		lsrs	r3, r3, #24
 594:nanopb/pb_encode.c ****     return pb_write(stream, bytes, 8);
 1229              		.loc 1 594 14 view .LVU357
 1230 0038 8DF80730 		strb	r3, [sp, #7]
 595:nanopb/pb_encode.c **** }
 1231              		.loc 1 595 5 is_stmt 1 view .LVU358
 595:nanopb/pb_encode.c **** }
 1232              		.loc 1 595 12 is_stmt 0 view .LVU359
 1233 003c 0822     		movs	r2, #8
 1234 003e 6946     		mov	r1, sp
 1235 0040 FFF7FEFF 		bl	pb_write
 1236              	.LVL127:
 596:nanopb/pb_encode.c **** #endif
 1237              		.loc 1 596 1 view .LVU360
 1238 0044 03B0     		add	sp, sp, #12
 1239              	.LCFI24:
 1240              		.cfi_def_cfa_offset 4
 1241              		@ sp needed
 1242 0046 5DF804FB 		ldr	pc, [sp], #4
 1243              		.cfi_endproc
 1244              	.LFE18:
 1246              		.section	.text.pb_enc_fixed64,"ax",%progbits
 1247              		.align	1
 1248              		.syntax unified
 1249              		.thumb
 1250              		.thumb_func
 1251              		.fpu softvfp
 1253              	pb_enc_fixed64:
 1254              	.LVL128:
 1255              	.LFB26:
 753:nanopb/pb_encode.c ****     PB_UNUSED(field);
 1256              		.loc 1 753 1 is_stmt 1 view -0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 753:nanopb/pb_encode.c ****     PB_UNUSED(field);
 1260              		.loc 1 753 1 is_stmt 0 view .LVU362
 1261 0000 08B5     		push	{r3, lr}
 1262              	.LCFI25:
 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 3, -8
 1265              		.cfi_offset 14, -4
 754:nanopb/pb_encode.c **** #ifndef PB_WITHOUT_64BIT
 1266              		.loc 1 754 5 is_stmt 1 view .LVU363
 756:nanopb/pb_encode.c **** #else
 1267              		.loc 1 756 5 view .LVU364
 756:nanopb/pb_encode.c **** #else
 1268              		.loc 1 756 12 is_stmt 0 view .LVU365
 1269 0002 1146     		mov	r1, r2
 1270              	.LVL129:
 756:nanopb/pb_encode.c **** #else
 1271              		.loc 1 756 12 view .LVU366
 1272 0004 FFF7FEFF 		bl	pb_encode_fixed64
 1273              	.LVL130:
 761:nanopb/pb_encode.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 41


 1274              		.loc 1 761 1 view .LVU367
 1275 0008 08BD     		pop	{r3, pc}
 1276              		.cfi_endproc
 1277              	.LFE26:
 1279              		.section	.text.pb_encode_tag,"ax",%progbits
 1280              		.align	1
 1281              		.global	pb_encode_tag
 1282              		.syntax unified
 1283              		.thumb
 1284              		.thumb_func
 1285              		.fpu softvfp
 1287              	pb_encode_tag:
 1288              	.LVL131:
 1289              	.LFB19:
 600:nanopb/pb_encode.c ****     pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 1290              		.loc 1 600 1 is_stmt 1 view -0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 0, uses_anonymous_args = 0
 600:nanopb/pb_encode.c ****     pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 1294              		.loc 1 600 1 is_stmt 0 view .LVU369
 1295 0000 08B5     		push	{r3, lr}
 1296              	.LCFI26:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 3, -8
 1299              		.cfi_offset 14, -4
 1300 0002 1346     		mov	r3, r2
 601:nanopb/pb_encode.c ****     return pb_encode_varint(stream, tag);
 1301              		.loc 1 601 5 is_stmt 1 view .LVU370
 1302              	.LVL132:
 602:nanopb/pb_encode.c **** }
 1303              		.loc 1 602 5 view .LVU371
 602:nanopb/pb_encode.c **** }
 1304              		.loc 1 602 12 is_stmt 0 view .LVU372
 1305 0004 41EAC202 		orr	r2, r1, r2, lsl #3
 1306              	.LVL133:
 602:nanopb/pb_encode.c **** }
 1307              		.loc 1 602 12 view .LVU373
 1308 0008 5B0F     		lsrs	r3, r3, #29
 1309              	.LVL134:
 602:nanopb/pb_encode.c **** }
 1310              		.loc 1 602 12 view .LVU374
 1311 000a FFF7FEFF 		bl	pb_encode_varint
 1312              	.LVL135:
 603:nanopb/pb_encode.c **** 
 1313              		.loc 1 603 1 view .LVU375
 1314 000e 08BD     		pop	{r3, pc}
 1315              		.cfi_endproc
 1316              	.LFE19:
 1318              		.section	.text.pb_encode_tag_for_field,"ax",%progbits
 1319              		.align	1
 1320              		.global	pb_encode_tag_for_field
 1321              		.syntax unified
 1322              		.thumb
 1323              		.thumb_func
 1324              		.fpu softvfp
 1326              	pb_encode_tag_for_field:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 42


 1327              	.LVL136:
 1328              	.LFB20:
 606:nanopb/pb_encode.c ****     pb_wire_type_t wiretype;
 1329              		.loc 1 606 1 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 606:nanopb/pb_encode.c ****     pb_wire_type_t wiretype;
 1333              		.loc 1 606 1 is_stmt 0 view .LVU377
 1334 0000 10B5     		push	{r4, lr}
 1335              	.LCFI27:
 1336              		.cfi_def_cfa_offset 8
 1337              		.cfi_offset 4, -8
 1338              		.cfi_offset 14, -4
 607:nanopb/pb_encode.c ****     switch (PB_LTYPE(field->type))
 1339              		.loc 1 607 5 is_stmt 1 view .LVU378
 608:nanopb/pb_encode.c ****     {
 1340              		.loc 1 608 5 view .LVU379
 608:nanopb/pb_encode.c ****     {
 1341              		.loc 1 608 13 is_stmt 0 view .LVU380
 1342 0002 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 608:nanopb/pb_encode.c ****     {
 1343              		.loc 1 608 5 view .LVU381
 1344 0004 03F00F03 		and	r3, r3, #15
 1345 0008 092B     		cmp	r3, #9
 1346 000a 0AD8     		bhi	.L132
 1347 000c DFE803F0 		tbb	[pc, r3]
 1348              	.L134:
 1349 0010 10       		.byte	(.L137-.L134)/2
 1350 0011 10       		.byte	(.L137-.L134)/2
 1351 0012 10       		.byte	(.L137-.L134)/2
 1352 0013 12       		.byte	(.L140-.L134)/2
 1353 0014 05       		.byte	(.L135-.L134)/2
 1354 0015 07       		.byte	(.L133-.L134)/2
 1355 0016 07       		.byte	(.L133-.L134)/2
 1356 0017 07       		.byte	(.L133-.L134)/2
 1357 0018 09       		.byte	(.L132-.L134)/2
 1358 0019 07       		.byte	(.L133-.L134)/2
 1359              		.p2align 1
 1360              	.L135:
 621:nanopb/pb_encode.c ****             break;
 1361              		.loc 1 621 13 is_stmt 1 view .LVU382
 1362              	.LVL137:
 622:nanopb/pb_encode.c ****         
 1363              		.loc 1 622 13 view .LVU383
 621:nanopb/pb_encode.c ****             break;
 1364              		.loc 1 621 22 is_stmt 0 view .LVU384
 1365 001a 0124     		movs	r4, #1
 622:nanopb/pb_encode.c ****         
 1366              		.loc 1 622 13 view .LVU385
 1367 001c 0BE0     		b	.L136
 1368              	.LVL138:
 1369              	.L133:
 628:nanopb/pb_encode.c ****             break;
 1370              		.loc 1 628 13 is_stmt 1 view .LVU386
 629:nanopb/pb_encode.c ****         
 1371              		.loc 1 629 13 view .LVU387
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 43


 628:nanopb/pb_encode.c ****             break;
 1372              		.loc 1 628 22 is_stmt 0 view .LVU388
 1373 001e 0224     		movs	r4, #2
 629:nanopb/pb_encode.c ****         
 1374              		.loc 1 629 13 view .LVU389
 1375 0020 09E0     		b	.L136
 1376              	.LVL139:
 1377              	.L132:
 632:nanopb/pb_encode.c ****     }
 1378              		.loc 1 632 13 is_stmt 1 view .LVU390
 1379 0022 0369     		ldr	r3, [r0, #16]
 1380 0024 13B1     		cbz	r3, .L142
 1381              	.L138:
 632:nanopb/pb_encode.c ****     }
 1382              		.loc 1 632 13 is_stmt 0 discriminator 4 view .LVU391
 1383 0026 0361     		str	r3, [r0, #16]
 1384 0028 0020     		movs	r0, #0
 1385              	.LVL140:
 632:nanopb/pb_encode.c ****     }
 1386              		.loc 1 632 13 discriminator 4 view .LVU392
 1387 002a 08E0     		b	.L139
 1388              	.LVL141:
 1389              	.L142:
 632:nanopb/pb_encode.c ****     }
 1390              		.loc 1 632 13 view .LVU393
 1391 002c 044B     		ldr	r3, .L143
 1392 002e FAE7     		b	.L138
 1393              	.L137:
 613:nanopb/pb_encode.c ****             break;
 1394              		.loc 1 613 22 view .LVU394
 1395 0030 0024     		movs	r4, #0
 1396 0032 00E0     		b	.L136
 1397              	.L140:
 617:nanopb/pb_encode.c ****             break;
 1398              		.loc 1 617 22 view .LVU395
 1399 0034 0524     		movs	r4, #5
 1400              	.L136:
 1401              	.LVL142:
 635:nanopb/pb_encode.c **** }
 1402              		.loc 1 635 5 is_stmt 1 view .LVU396
 635:nanopb/pb_encode.c **** }
 1403              		.loc 1 635 12 is_stmt 0 view .LVU397
 1404 0036 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1405 0038 2146     		mov	r1, r4
 1406              	.LVL143:
 635:nanopb/pb_encode.c **** }
 1407              		.loc 1 635 12 view .LVU398
 1408 003a FFF7FEFF 		bl	pb_encode_tag
 1409              	.LVL144:
 1410              	.L139:
 636:nanopb/pb_encode.c **** 
 1411              		.loc 1 636 1 view .LVU399
 1412 003e 10BD     		pop	{r4, pc}
 1413              	.L144:
 1414              		.align	2
 1415              	.L143:
 1416 0040 00000000 		.word	.LC4
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 44


 1417              		.cfi_endproc
 1418              	.LFE20:
 1420              		.section	.text.encode_array,"ax",%progbits
 1421              		.align	1
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1425              		.fpu softvfp
 1427              	encode_array:
 1428              	.LVL145:
 1429              	.LFB3:
 126:nanopb/pb_encode.c ****     size_t i;
 1430              		.loc 1 126 1 is_stmt 1 view -0
 1431              		.cfi_startproc
 1432              		@ args = 4, pretend = 0, frame = 24
 1433              		@ frame_needed = 0, uses_anonymous_args = 0
 126:nanopb/pb_encode.c ****     size_t i;
 1434              		.loc 1 126 1 is_stmt 0 view .LVU401
 1435 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1436              	.LCFI28:
 1437              		.cfi_def_cfa_offset 36
 1438              		.cfi_offset 4, -36
 1439              		.cfi_offset 5, -32
 1440              		.cfi_offset 6, -28
 1441              		.cfi_offset 7, -24
 1442              		.cfi_offset 8, -20
 1443              		.cfi_offset 9, -16
 1444              		.cfi_offset 10, -12
 1445              		.cfi_offset 11, -8
 1446              		.cfi_offset 14, -4
 1447 0004 87B0     		sub	sp, sp, #28
 1448              	.LCFI29:
 1449              		.cfi_def_cfa_offset 64
 1450 0006 DDF84090 		ldr	r9, [sp, #64]
 127:nanopb/pb_encode.c ****     const void *p;
 1451              		.loc 1 127 5 is_stmt 1 view .LVU402
 128:nanopb/pb_encode.c ****     size_t size;
 1452              		.loc 1 128 5 view .LVU403
 129:nanopb/pb_encode.c ****     
 1453              		.loc 1 129 5 view .LVU404
 131:nanopb/pb_encode.c ****         return true;
 1454              		.loc 1 131 5 view .LVU405
 131:nanopb/pb_encode.c ****         return true;
 1455              		.loc 1 131 8 is_stmt 0 view .LVU406
 1456 000a 002B     		cmp	r3, #0
 1457 000c 00F08880 		beq	.L161
 1458 0010 0746     		mov	r7, r0
 1459 0012 0C46     		mov	r4, r1
 1460 0014 1546     		mov	r5, r2
 1461 0016 9846     		mov	r8, r3
 134:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
 1462              		.loc 1 134 5 is_stmt 1 view .LVU407
 134:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
 1463              		.loc 1 134 9 is_stmt 0 view .LVU408
 1464 0018 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1465              	.LVL146:
 134:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 45


 1466              		.loc 1 134 8 view .LVU409
 1467 001a 03F0C002 		and	r2, r3, #192
 1468              	.LVL147:
 134:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
 1469              		.loc 1 134 8 view .LVU410
 1470 001e 802A     		cmp	r2, #128
 1471 0020 02D0     		beq	.L147
 134:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
 1472              		.loc 1 134 67 discriminator 1 view .LVU411
 1473 0022 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 134:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
 1474              		.loc 1 134 51 discriminator 1 view .LVU412
 1475 0024 4245     		cmp	r2, r8
 1476 0026 05D3     		bcc	.L166
 1477              	.L147:
 138:nanopb/pb_encode.c ****     {
 1478              		.loc 1 138 5 is_stmt 1 view .LVU413
 138:nanopb/pb_encode.c ****     {
 1479              		.loc 1 138 8 is_stmt 0 view .LVU414
 1480 0028 03F00F03 		and	r3, r3, #15
 1481 002c 042B     		cmp	r3, #4
 1482 002e 09D9     		bls	.L167
 183:nanopb/pb_encode.c ****         {
 1483              		.loc 1 183 16 view .LVU415
 1484 0030 0026     		movs	r6, #0
 1485 0032 58E0     		b	.L149
 1486              	.L166:
 135:nanopb/pb_encode.c ****     
 1487              		.loc 1 135 9 is_stmt 1 view .LVU416
 1488 0034 0369     		ldr	r3, [r0, #16]
 1489 0036 1BB1     		cbz	r3, .L168
 1490              	.L148:
 135:nanopb/pb_encode.c ****     
 1491              		.loc 1 135 9 is_stmt 0 discriminator 4 view .LVU417
 1492 0038 3B61     		str	r3, [r7, #16]
 1493 003a 4FF0000A 		mov	r10, #0
 1494 003e 71E0     		b	.L146
 1495              	.L168:
 135:nanopb/pb_encode.c ****     
 1496              		.loc 1 135 9 view .LVU418
 1497 0040 3B4B     		ldr	r3, .L174
 1498 0042 F9E7     		b	.L148
 1499              	.L167:
 140:nanopb/pb_encode.c ****             return false;
 1500              		.loc 1 140 9 is_stmt 1 view .LVU419
 140:nanopb/pb_encode.c ****             return false;
 1501              		.loc 1 140 14 is_stmt 0 view .LVU420
 1502 0044 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1503 0046 0221     		movs	r1, #2
 1504              	.LVL148:
 140:nanopb/pb_encode.c ****             return false;
 1505              		.loc 1 140 14 view .LVU421
 1506 0048 3846     		mov	r0, r7
 1507              	.LVL149:
 140:nanopb/pb_encode.c ****             return false;
 1508              		.loc 1 140 14 view .LVU422
 1509 004a FFF7FEFF 		bl	pb_encode_tag
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 46


 1510              	.LVL150:
 140:nanopb/pb_encode.c ****             return false;
 1511              		.loc 1 140 12 view .LVU423
 1512 004e 8246     		mov	r10, r0
 1513 0050 0028     		cmp	r0, #0
 1514 0052 67D0     		beq	.L146
 144:nanopb/pb_encode.c ****         {
 1515              		.loc 1 144 9 is_stmt 1 view .LVU424
 144:nanopb/pb_encode.c ****         {
 1516              		.loc 1 144 13 is_stmt 0 view .LVU425
 1517 0054 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1518 0056 03F00F03 		and	r3, r3, #15
 144:nanopb/pb_encode.c ****         {
 1519              		.loc 1 144 12 view .LVU426
 1520 005a 032B     		cmp	r3, #3
 1521 005c 15D0     		beq	.L169
 148:nanopb/pb_encode.c ****         {
 1522              		.loc 1 148 14 is_stmt 1 view .LVU427
 148:nanopb/pb_encode.c ****         {
 1523              		.loc 1 148 17 is_stmt 0 view .LVU428
 1524 005e 042B     		cmp	r3, #4
 1525 0060 2CD0     		beq	.L170
 1526              	.LBB7:
 154:nanopb/pb_encode.c ****             p = pData;
 1527              		.loc 1 154 13 is_stmt 1 view .LVU429
 154:nanopb/pb_encode.c ****             p = pData;
 1528              		.loc 1 154 26 is_stmt 0 view .LVU430
 1529 0062 0026     		movs	r6, #0
 1530 0064 0196     		str	r6, [sp, #4]
 1531 0066 0296     		str	r6, [sp, #8]
 1532 0068 0396     		str	r6, [sp, #12]
 1533 006a 0496     		str	r6, [sp, #16]
 1534 006c 0596     		str	r6, [sp, #20]
 155:nanopb/pb_encode.c ****             for (i = 0; i < count; i++)
 1535              		.loc 1 155 13 is_stmt 1 view .LVU431
 1536              	.LVL151:
 156:nanopb/pb_encode.c ****             {
 1537              		.loc 1 156 13 view .LVU432
 155:nanopb/pb_encode.c ****             for (i = 0; i < count; i++)
 1538              		.loc 1 155 15 is_stmt 0 view .LVU433
 1539 006e AB46     		mov	fp, r5
 1540              	.LVL152:
 1541              	.L153:
 156:nanopb/pb_encode.c ****             {
 1542              		.loc 1 156 13 discriminator 1 view .LVU434
 1543 0070 4645     		cmp	r6, r8
 1544 0072 26D2     		bcs	.L171
 158:nanopb/pb_encode.c ****                     return false;
 1545              		.loc 1 158 17 is_stmt 1 view .LVU435
 158:nanopb/pb_encode.c ****                     return false;
 1546              		.loc 1 158 22 is_stmt 0 view .LVU436
 1547 0074 5A46     		mov	r2, fp
 1548 0076 2146     		mov	r1, r4
 1549 0078 01A8     		add	r0, sp, #4
 1550 007a C847     		blx	r9
 1551              	.LVL153:
 158:nanopb/pb_encode.c ****                     return false;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 47


 1552              		.loc 1 158 20 view .LVU437
 1553 007c 8246     		mov	r10, r0
 1554 007e 0028     		cmp	r0, #0
 1555 0080 50D0     		beq	.L146
 160:nanopb/pb_encode.c ****             }
 1556              		.loc 1 160 17 is_stmt 1 discriminator 2 view .LVU438
 160:nanopb/pb_encode.c ****             }
 1557              		.loc 1 160 43 is_stmt 0 discriminator 2 view .LVU439
 1558 0082 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 160:nanopb/pb_encode.c ****             }
 1559              		.loc 1 160 19 discriminator 2 view .LVU440
 1560 0084 9B44     		add	fp, fp, r3
 1561              	.LVL154:
 156:nanopb/pb_encode.c ****             {
 1562              		.loc 1 156 37 discriminator 2 view .LVU441
 1563 0086 0136     		adds	r6, r6, #1
 1564              	.LVL155:
 156:nanopb/pb_encode.c ****             {
 1565              		.loc 1 156 37 discriminator 2 view .LVU442
 1566 0088 F2E7     		b	.L153
 1567              	.LVL156:
 1568              	.L169:
 156:nanopb/pb_encode.c ****             {
 1569              		.loc 1 156 37 discriminator 2 view .LVU443
 1570              	.LBE7:
 146:nanopb/pb_encode.c ****         }
 1571              		.loc 1 146 13 is_stmt 1 view .LVU444
 146:nanopb/pb_encode.c ****         }
 1572              		.loc 1 146 18 is_stmt 0 view .LVU445
 1573 008a 4FEA8806 		lsl	r6, r8, #2
 1574              	.LVL157:
 1575              	.L151:
 165:nanopb/pb_encode.c ****             return false;
 1576              		.loc 1 165 9 is_stmt 1 view .LVU446
 165:nanopb/pb_encode.c ****             return false;
 1577              		.loc 1 165 14 is_stmt 0 view .LVU447
 1578 008e 3246     		mov	r2, r6
 1579 0090 0023     		movs	r3, #0
 1580 0092 3846     		mov	r0, r7
 1581 0094 FFF7FEFF 		bl	pb_encode_varint
 1582              	.LVL158:
 165:nanopb/pb_encode.c ****             return false;
 1583              		.loc 1 165 12 view .LVU448
 1584 0098 8246     		mov	r10, r0
 1585 009a 0028     		cmp	r0, #0
 1586 009c 42D0     		beq	.L146
 168:nanopb/pb_encode.c ****             return pb_write(stream, NULL, size); /* Just sizing.. */
 1587              		.loc 1 168 9 is_stmt 1 view .LVU449
 168:nanopb/pb_encode.c ****             return pb_write(stream, NULL, size); /* Just sizing.. */
 1588              		.loc 1 168 19 is_stmt 0 view .LVU450
 1589 009e 3B68     		ldr	r3, [r7]
 168:nanopb/pb_encode.c ****             return pb_write(stream, NULL, size); /* Just sizing.. */
 1590              		.loc 1 168 12 view .LVU451
 1591 00a0 8BB1     		cbz	r3, .L172
 173:nanopb/pb_encode.c ****         {
 1592              		.loc 1 173 16 view .LVU452
 1593 00a2 0026     		movs	r6, #0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 48


 1594              	.LVL159:
 1595              	.L156:
 173:nanopb/pb_encode.c ****         {
 1596              		.loc 1 173 9 discriminator 1 view .LVU453
 1597 00a4 4645     		cmp	r6, r8
 1598 00a6 3DD2     		bcs	.L146
 175:nanopb/pb_encode.c ****                 return false;
 1599              		.loc 1 175 13 is_stmt 1 view .LVU454
 175:nanopb/pb_encode.c ****                 return false;
 1600              		.loc 1 175 18 is_stmt 0 view .LVU455
 1601 00a8 2A46     		mov	r2, r5
 1602 00aa 2146     		mov	r1, r4
 1603 00ac 3846     		mov	r0, r7
 1604 00ae C847     		blx	r9
 1605              	.LVL160:
 175:nanopb/pb_encode.c ****                 return false;
 1606              		.loc 1 175 16 view .LVU456
 1607 00b0 0028     		cmp	r0, #0
 1608 00b2 3BD0     		beq	.L164
 177:nanopb/pb_encode.c ****         }
 1609              		.loc 1 177 13 is_stmt 1 discriminator 2 view .LVU457
 177:nanopb/pb_encode.c ****         }
 1610              		.loc 1 177 39 is_stmt 0 discriminator 2 view .LVU458
 1611 00b4 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 177:nanopb/pb_encode.c ****         }
 1612              		.loc 1 177 15 discriminator 2 view .LVU459
 1613 00b6 1D44     		add	r5, r5, r3
 1614              	.LVL161:
 173:nanopb/pb_encode.c ****         {
 1615              		.loc 1 173 33 discriminator 2 view .LVU460
 1616 00b8 0136     		adds	r6, r6, #1
 1617              	.LVL162:
 173:nanopb/pb_encode.c ****         {
 1618              		.loc 1 173 33 discriminator 2 view .LVU461
 1619 00ba F3E7     		b	.L156
 1620              	.LVL163:
 1621              	.L170:
 150:nanopb/pb_encode.c ****         }
 1622              		.loc 1 150 13 is_stmt 1 view .LVU462
 150:nanopb/pb_encode.c ****         }
 1623              		.loc 1 150 18 is_stmt 0 view .LVU463
 1624 00bc 4FEAC806 		lsl	r6, r8, #3
 1625              	.LVL164:
 150:nanopb/pb_encode.c ****         }
 1626              		.loc 1 150 18 view .LVU464
 1627 00c0 E5E7     		b	.L151
 1628              	.LVL165:
 1629              	.L171:
 1630              	.LBB8:
 162:nanopb/pb_encode.c ****         }
 1631              		.loc 1 162 13 is_stmt 1 view .LVU465
 162:nanopb/pb_encode.c ****         }
 1632              		.loc 1 162 18 is_stmt 0 view .LVU466
 1633 00c2 049E     		ldr	r6, [sp, #16]
 1634              	.LVL166:
 162:nanopb/pb_encode.c ****         }
 1635              		.loc 1 162 18 view .LVU467
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 49


 1636 00c4 E3E7     		b	.L151
 1637              	.LVL167:
 1638              	.L172:
 162:nanopb/pb_encode.c ****         }
 1639              		.loc 1 162 18 view .LVU468
 1640              	.LBE8:
 169:nanopb/pb_encode.c ****         
 1641              		.loc 1 169 13 is_stmt 1 view .LVU469
 169:nanopb/pb_encode.c ****         
 1642              		.loc 1 169 20 is_stmt 0 view .LVU470
 1643 00c6 3246     		mov	r2, r6
 1644 00c8 0021     		movs	r1, #0
 1645 00ca 3846     		mov	r0, r7
 1646 00cc FFF7FEFF 		bl	pb_write
 1647              	.LVL168:
 1648 00d0 8246     		mov	r10, r0
 1649 00d2 27E0     		b	.L146
 1650              	.LVL169:
 1651              	.L158:
 201:nanopb/pb_encode.c ****                     return false;
 1652              		.loc 1 201 17 is_stmt 1 view .LVU471
 201:nanopb/pb_encode.c ****                     return false;
 1653              		.loc 1 201 22 is_stmt 0 view .LVU472
 1654 00d4 2A46     		mov	r2, r5
 1655 00d6 2146     		mov	r1, r4
 1656 00d8 3846     		mov	r0, r7
 1657 00da C847     		blx	r9
 1658              	.LVL170:
 201:nanopb/pb_encode.c ****                     return false;
 1659              		.loc 1 201 20 view .LVU473
 1660 00dc 8246     		mov	r10, r0
 1661 00de 08B3     		cbz	r0, .L146
 1662              	.L159:
 204:nanopb/pb_encode.c ****         }
 1663              		.loc 1 204 13 is_stmt 1 discriminator 2 view .LVU474
 204:nanopb/pb_encode.c ****         }
 1664              		.loc 1 204 39 is_stmt 0 discriminator 2 view .LVU475
 1665 00e0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 204:nanopb/pb_encode.c ****         }
 1666              		.loc 1 204 15 discriminator 2 view .LVU476
 1667 00e2 1D44     		add	r5, r5, r3
 1668              	.LVL171:
 183:nanopb/pb_encode.c ****         {
 1669              		.loc 1 183 33 discriminator 2 view .LVU477
 1670 00e4 0136     		adds	r6, r6, #1
 1671              	.LVL172:
 1672              	.L149:
 183:nanopb/pb_encode.c ****         {
 1673              		.loc 1 183 9 discriminator 1 view .LVU478
 1674 00e6 4645     		cmp	r6, r8
 1675 00e8 17D2     		bcs	.L173
 185:nanopb/pb_encode.c ****                 return false;
 1676              		.loc 1 185 13 is_stmt 1 view .LVU479
 185:nanopb/pb_encode.c ****                 return false;
 1677              		.loc 1 185 18 is_stmt 0 view .LVU480
 1678 00ea 2146     		mov	r1, r4
 1679 00ec 3846     		mov	r0, r7
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 50


 1680 00ee FFF7FEFF 		bl	pb_encode_tag_for_field
 1681              	.LVL173:
 185:nanopb/pb_encode.c ****                 return false;
 1682              		.loc 1 185 16 view .LVU481
 1683 00f2 8246     		mov	r10, r0
 1684 00f4 B0B1     		cbz	r0, .L146
 192:nanopb/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 1685              		.loc 1 192 13 is_stmt 1 view .LVU482
 192:nanopb/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 1686              		.loc 1 192 17 is_stmt 0 view .LVU483
 1687 00f6 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 192:nanopb/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 1688              		.loc 1 192 16 view .LVU484
 1689 00f8 03F0C002 		and	r2, r3, #192
 1690 00fc 802A     		cmp	r2, #128
 1691 00fe E9D1     		bne	.L158
 193:nanopb/pb_encode.c ****                  PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 1692              		.loc 1 193 59 discriminator 1 view .LVU485
 1693 0100 03F00F03 		and	r3, r3, #15
 1694 0104 053B     		subs	r3, r3, #5
 192:nanopb/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 1695              		.loc 1 192 59 discriminator 1 view .LVU486
 1696 0106 012B     		cmp	r3, #1
 1697 0108 E4D8     		bhi	.L158
 196:nanopb/pb_encode.c ****                     return false;      
 1698              		.loc 1 196 17 is_stmt 1 view .LVU487
 196:nanopb/pb_encode.c ****                     return false;      
 1699              		.loc 1 196 22 is_stmt 0 view .LVU488
 1700 010a 2A68     		ldr	r2, [r5]
 1701 010c 2146     		mov	r1, r4
 1702 010e 3846     		mov	r0, r7
 1703 0110 C847     		blx	r9
 1704              	.LVL174:
 196:nanopb/pb_encode.c ****                     return false;      
 1705              		.loc 1 196 20 view .LVU489
 1706 0112 8246     		mov	r10, r0
 1707 0114 0028     		cmp	r0, #0
 1708 0116 E3D1     		bne	.L159
 1709 0118 04E0     		b	.L146
 1710              	.L173:
 208:nanopb/pb_encode.c **** }
 1711              		.loc 1 208 12 view .LVU490
 1712 011a 4FF0010A 		mov	r10, #1
 1713 011e 01E0     		b	.L146
 1714              	.LVL175:
 1715              	.L161:
 132:nanopb/pb_encode.c **** 
 1716              		.loc 1 132 16 view .LVU491
 1717 0120 4FF0010A 		mov	r10, #1
 1718              	.LVL176:
 1719              	.L146:
 209:nanopb/pb_encode.c **** 
 1720              		.loc 1 209 1 view .LVU492
 1721 0124 5046     		mov	r0, r10
 1722 0126 07B0     		add	sp, sp, #28
 1723              	.LCFI30:
 1724              		.cfi_remember_state
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 51


 1725              		.cfi_def_cfa_offset 36
 1726              		@ sp needed
 1727 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1728              	.LVL177:
 1729              	.L164:
 1730              	.LCFI31:
 1731              		.cfi_restore_state
 176:nanopb/pb_encode.c ****             p = (const char*)p + field->data_size;
 1732              		.loc 1 176 24 view .LVU493
 1733 012c 8246     		mov	r10, r0
 1734 012e F9E7     		b	.L146
 1735              	.L175:
 1736              		.align	2
 1737              	.L174:
 1738 0130 00000000 		.word	.LC5
 1739              		.cfi_endproc
 1740              	.LFE3:
 1742              		.section	.text.encode_basic_field,"ax",%progbits
 1743              		.align	1
 1744              		.syntax unified
 1745              		.thumb
 1746              		.thumb_func
 1747              		.fpu softvfp
 1749              	encode_basic_field:
 1750              	.LVL178:
 1751              	.LFB5:
 307:nanopb/pb_encode.c ****     pb_encoder_t func;
 1752              		.loc 1 307 1 is_stmt 1 view -0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 8
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 307:nanopb/pb_encode.c ****     pb_encoder_t func;
 1756              		.loc 1 307 1 is_stmt 0 view .LVU495
 1757 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1758              	.LCFI32:
 1759              		.cfi_def_cfa_offset 20
 1760              		.cfi_offset 4, -20
 1761              		.cfi_offset 5, -16
 1762              		.cfi_offset 6, -12
 1763              		.cfi_offset 7, -8
 1764              		.cfi_offset 14, -4
 1765 0002 85B0     		sub	sp, sp, #20
 1766              	.LCFI33:
 1767              		.cfi_def_cfa_offset 40
 1768 0004 0646     		mov	r6, r0
 1769 0006 0C46     		mov	r4, r1
 1770 0008 1546     		mov	r5, r2
 308:nanopb/pb_encode.c ****     bool implicit_has;
 1771              		.loc 1 308 5 is_stmt 1 view .LVU496
 309:nanopb/pb_encode.c ****     const void *pSize = &implicit_has;
 1772              		.loc 1 309 5 view .LVU497
 310:nanopb/pb_encode.c ****     
 1773              		.loc 1 310 5 view .LVU498
 1774              	.LVL179:
 312:nanopb/pb_encode.c ****     
 1775              		.loc 1 312 5 view .LVU499
 312:nanopb/pb_encode.c ****     
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 52


 1776              		.loc 1 312 24 is_stmt 0 view .LVU500
 1777 000a 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 1778              	.LVL180:
 312:nanopb/pb_encode.c ****     
 1779              		.loc 1 312 24 view .LVU501
 1780 000c 02F00F01 		and	r1, r2, #15
 1781              	.LVL181:
 312:nanopb/pb_encode.c ****     
 1782              		.loc 1 312 10 view .LVU502
 1783 0010 3D4B     		ldr	r3, .L202
 1784 0012 53F82170 		ldr	r7, [r3, r1, lsl #2]
 1785              	.LVL182:
 314:nanopb/pb_encode.c ****     {
 1786              		.loc 1 314 5 is_stmt 1 view .LVU503
 314:nanopb/pb_encode.c ****     {
 1787              		.loc 1 314 14 is_stmt 0 view .LVU504
 1788 0016 94F90330 		ldrsb	r3, [r4, #3]
 314:nanopb/pb_encode.c ****     {
 1789              		.loc 1 314 8 view .LVU505
 1790 001a A3B1     		cbz	r3, .L177
 317:nanopb/pb_encode.c ****     }
 1791              		.loc 1 317 9 is_stmt 1 view .LVU506
 317:nanopb/pb_encode.c ****     }
 1792              		.loc 1 317 15 is_stmt 0 view .LVU507
 1793 001c EA18     		adds	r2, r5, r3
 1794              	.LVL183:
 1795              	.L178:
 330:nanopb/pb_encode.c ****     {
 1796              		.loc 1 330 5 is_stmt 1 view .LVU508
 330:nanopb/pb_encode.c ****     {
 1797              		.loc 1 330 9 is_stmt 0 view .LVU509
 1798 001e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 330:nanopb/pb_encode.c ****     {
 1799              		.loc 1 330 8 view .LVU510
 1800 0020 03F0C001 		and	r1, r3, #192
 1801 0024 8029     		cmp	r1, #128
 1802 0026 23D0     		beq	.L194
 1803              	.L180:
 340:nanopb/pb_encode.c ****     {
 1804              		.loc 1 340 5 is_stmt 1 view .LVU511
 1805 0028 03F03003 		and	r3, r3, #48
 1806 002c 102B     		cmp	r3, #16
 1807 002e 3CD0     		beq	.L181
 340:nanopb/pb_encode.c ****     {
 1808              		.loc 1 340 5 is_stmt 0 view .LVU512
 1809 0030 25D9     		bls	.L195
 1810 0032 202B     		cmp	r3, #32
 1811 0034 49D0     		beq	.L185
 1812 0036 302B     		cmp	r3, #48
 1813 0038 5FD1     		bne	.L184
 368:nanopb/pb_encode.c ****             {
 1814              		.loc 1 368 13 is_stmt 1 view .LVU513
 368:nanopb/pb_encode.c ****             {
 1815              		.loc 1 368 17 is_stmt 0 view .LVU514
 1816 003a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1817              	.LVL184:
 368:nanopb/pb_encode.c ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 53


 1818              		.loc 1 368 50 view .LVU515
 1819 003c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 368:nanopb/pb_encode.c ****             {
 1820              		.loc 1 368 16 view .LVU516
 1821 003e 9A42     		cmp	r2, r3
 1822 0040 4ED0     		beq	.L196
 382:nanopb/pb_encode.c **** }
 1823              		.loc 1 382 12 view .LVU517
 1824 0042 0123     		movs	r3, #1
 1825 0044 49E0     		b	.L189
 1826              	.LVL185:
 1827              	.L177:
 319:nanopb/pb_encode.c ****     {
 1828              		.loc 1 319 10 is_stmt 1 view .LVU518
 319:nanopb/pb_encode.c ****     {
 1829              		.loc 1 319 13 is_stmt 0 view .LVU519
 1830 0046 02F03002 		and	r2, r2, #48
 1831 004a 102A     		cmp	r2, #16
 1832 004c 05D0     		beq	.L197
 327:nanopb/pb_encode.c ****     }
 1833              		.loc 1 327 9 is_stmt 1 view .LVU520
 327:nanopb/pb_encode.c ****     }
 1834              		.loc 1 327 22 is_stmt 0 view .LVU521
 1835 004e 0123     		movs	r3, #1
 1836 0050 8DF80F30 		strb	r3, [sp, #15]
 310:nanopb/pb_encode.c ****     
 1837              		.loc 1 310 17 view .LVU522
 1838 0054 0DF10F02 		add	r2, sp, #15
 1839              	.LVL186:
 310:nanopb/pb_encode.c ****     
 1840              		.loc 1 310 17 view .LVU523
 1841 0058 E1E7     		b	.L178
 1842              	.LVL187:
 1843              	.L197:
 322:nanopb/pb_encode.c ****     }
 1844              		.loc 1 322 9 is_stmt 1 view .LVU524
 322:nanopb/pb_encode.c ****     }
 1845              		.loc 1 322 25 is_stmt 0 view .LVU525
 1846 005a 2946     		mov	r1, r5
 1847 005c 2046     		mov	r0, r4
 1848              	.LVL188:
 322:nanopb/pb_encode.c ****     }
 1849              		.loc 1 322 25 view .LVU526
 1850 005e FFF7FEFF 		bl	pb_check_proto3_default_value
 1851              	.LVL189:
 322:nanopb/pb_encode.c ****     }
 1852              		.loc 1 322 9 view .LVU527
 1853 0062 80F00100 		eor	r0, r0, #1
 322:nanopb/pb_encode.c ****     }
 1854              		.loc 1 322 22 view .LVU528
 1855 0066 8DF80F00 		strb	r0, [sp, #15]
 310:nanopb/pb_encode.c ****     
 1856              		.loc 1 310 17 view .LVU529
 1857 006a 0DF10F02 		add	r2, sp, #15
 1858              	.LVL190:
 310:nanopb/pb_encode.c ****     
 1859              		.loc 1 310 17 view .LVU530
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 54


 1860 006e D6E7     		b	.L178
 1861              	.L194:
 336:nanopb/pb_encode.c ****         implicit_has = (pData != NULL);
 1862              		.loc 1 336 9 is_stmt 1 view .LVU531
 336:nanopb/pb_encode.c ****         implicit_has = (pData != NULL);
 1863              		.loc 1 336 15 is_stmt 0 view .LVU532
 1864 0070 2D68     		ldr	r5, [r5]
 1865              	.LVL191:
 337:nanopb/pb_encode.c ****     }
 1866              		.loc 1 337 9 is_stmt 1 view .LVU533
 337:nanopb/pb_encode.c ****     }
 1867              		.loc 1 337 31 is_stmt 0 view .LVU534
 1868 0072 291C     		adds	r1, r5, #0
 1869 0074 18BF     		it	ne
 1870 0076 0121     		movne	r1, #1
 337:nanopb/pb_encode.c ****     }
 1871              		.loc 1 337 22 view .LVU535
 1872 0078 8DF80F10 		strb	r1, [sp, #15]
 1873 007c D4E7     		b	.L180
 1874              	.L195:
 340:nanopb/pb_encode.c ****     {
 1875              		.loc 1 340 5 view .LVU536
 1876 007e 002B     		cmp	r3, #0
 1877 0080 3BD1     		bne	.L184
 343:nanopb/pb_encode.c ****                 PB_RETURN_ERROR(stream, "missing required field");
 1878              		.loc 1 343 13 is_stmt 1 view .LVU537
 343:nanopb/pb_encode.c ****                 PB_RETURN_ERROR(stream, "missing required field");
 1879              		.loc 1 343 16 is_stmt 0 view .LVU538
 1880 0082 5DB1     		cbz	r5, .L198
 345:nanopb/pb_encode.c ****                 return false;
 1881              		.loc 1 345 13 is_stmt 1 view .LVU539
 345:nanopb/pb_encode.c ****                 return false;
 1882              		.loc 1 345 18 is_stmt 0 view .LVU540
 1883 0084 2146     		mov	r1, r4
 1884 0086 3046     		mov	r0, r6
 1885 0088 FFF7FEFF 		bl	pb_encode_tag_for_field
 1886              	.LVL192:
 345:nanopb/pb_encode.c ****                 return false;
 1887              		.loc 1 345 16 view .LVU541
 1888 008c 0346     		mov	r3, r0
 1889 008e 20B3     		cbz	r0, .L189
 347:nanopb/pb_encode.c ****                 return false;
 1890              		.loc 1 347 13 is_stmt 1 view .LVU542
 347:nanopb/pb_encode.c ****                 return false;
 1891              		.loc 1 347 18 is_stmt 0 view .LVU543
 1892 0090 2A46     		mov	r2, r5
 1893 0092 2146     		mov	r1, r4
 1894 0094 3046     		mov	r0, r6
 1895 0096 B847     		blx	r7
 1896              	.LVL193:
 1897 0098 0346     		mov	r3, r0
 1898 009a 1EE0     		b	.L189
 1899              	.LVL194:
 1900              	.L198:
 344:nanopb/pb_encode.c ****             if (!pb_encode_tag_for_field(stream, field))
 1901              		.loc 1 344 17 is_stmt 1 view .LVU544
 1902 009c 3369     		ldr	r3, [r6, #16]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 55


 1903 009e 13B1     		cbz	r3, .L199
 1904              	.L188:
 344:nanopb/pb_encode.c ****             if (!pb_encode_tag_for_field(stream, field))
 1905              		.loc 1 344 17 is_stmt 0 discriminator 4 view .LVU545
 1906 00a0 3361     		str	r3, [r6, #16]
 1907 00a2 0023     		movs	r3, #0
 1908 00a4 19E0     		b	.L189
 1909              	.L199:
 344:nanopb/pb_encode.c ****             if (!pb_encode_tag_for_field(stream, field))
 1910              		.loc 1 344 17 view .LVU546
 1911 00a6 194B     		ldr	r3, .L202+4
 1912 00a8 FAE7     		b	.L188
 1913              	.L181:
 352:nanopb/pb_encode.c ****             {
 1914              		.loc 1 352 13 is_stmt 1 view .LVU547
 352:nanopb/pb_encode.c ****             {
 1915              		.loc 1 352 17 is_stmt 0 view .LVU548
 1916 00aa 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 352:nanopb/pb_encode.c ****             {
 1917              		.loc 1 352 16 view .LVU549
 1918 00ac 0BB9     		cbnz	r3, .L200
 382:nanopb/pb_encode.c **** }
 1919              		.loc 1 382 12 view .LVU550
 1920 00ae 0123     		movs	r3, #1
 1921 00b0 13E0     		b	.L189
 1922              	.L200:
 354:nanopb/pb_encode.c ****                     return false;
 1923              		.loc 1 354 17 is_stmt 1 view .LVU551
 354:nanopb/pb_encode.c ****                     return false;
 1924              		.loc 1 354 22 is_stmt 0 view .LVU552
 1925 00b2 2146     		mov	r1, r4
 1926 00b4 3046     		mov	r0, r6
 1927 00b6 FFF7FEFF 		bl	pb_encode_tag_for_field
 1928              	.LVL195:
 354:nanopb/pb_encode.c ****                     return false;
 1929              		.loc 1 354 20 view .LVU553
 1930 00ba 0346     		mov	r3, r0
 1931 00bc 68B1     		cbz	r0, .L189
 357:nanopb/pb_encode.c ****                     return false;
 1932              		.loc 1 357 17 is_stmt 1 view .LVU554
 357:nanopb/pb_encode.c ****                     return false;
 1933              		.loc 1 357 22 is_stmt 0 view .LVU555
 1934 00be 2A46     		mov	r2, r5
 1935 00c0 2146     		mov	r1, r4
 1936 00c2 3046     		mov	r0, r6
 1937 00c4 B847     		blx	r7
 1938              	.LVL196:
 1939 00c6 0346     		mov	r3, r0
 1940 00c8 07E0     		b	.L189
 1941              	.LVL197:
 1942              	.L185:
 363:nanopb/pb_encode.c ****                 return false;
 1943              		.loc 1 363 13 is_stmt 1 view .LVU556
 363:nanopb/pb_encode.c ****                 return false;
 1944              		.loc 1 363 53 is_stmt 0 view .LVU557
 1945 00ca 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 363:nanopb/pb_encode.c ****                 return false;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 56


 1946              		.loc 1 363 18 view .LVU558
 1947 00cc 0097     		str	r7, [sp]
 1948 00ce 2A46     		mov	r2, r5
 1949              	.LVL198:
 363:nanopb/pb_encode.c ****                 return false;
 1950              		.loc 1 363 18 view .LVU559
 1951 00d0 2146     		mov	r1, r4
 1952 00d2 3046     		mov	r0, r6
 1953 00d4 FFF7FEFF 		bl	encode_array
 1954              	.LVL199:
 1955 00d8 0346     		mov	r3, r0
 1956              	.L189:
 383:nanopb/pb_encode.c **** 
 1957              		.loc 1 383 1 view .LVU560
 1958 00da 1846     		mov	r0, r3
 1959 00dc 05B0     		add	sp, sp, #20
 1960              	.LCFI34:
 1961              		.cfi_remember_state
 1962              		.cfi_def_cfa_offset 20
 1963              		@ sp needed
 1964 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 1965              	.LVL200:
 1966              	.L196:
 1967              	.LCFI35:
 1968              		.cfi_restore_state
 370:nanopb/pb_encode.c ****                     return false;
 1969              		.loc 1 370 17 is_stmt 1 view .LVU561
 370:nanopb/pb_encode.c ****                     return false;
 1970              		.loc 1 370 22 is_stmt 0 view .LVU562
 1971 00e0 2146     		mov	r1, r4
 1972 00e2 3046     		mov	r0, r6
 1973 00e4 FFF7FEFF 		bl	pb_encode_tag_for_field
 1974              	.LVL201:
 370:nanopb/pb_encode.c ****                     return false;
 1975              		.loc 1 370 20 view .LVU563
 1976 00e8 0346     		mov	r3, r0
 1977 00ea 0028     		cmp	r0, #0
 1978 00ec F5D0     		beq	.L189
 373:nanopb/pb_encode.c ****                     return false;
 1979              		.loc 1 373 17 is_stmt 1 view .LVU564
 373:nanopb/pb_encode.c ****                     return false;
 1980              		.loc 1 373 22 is_stmt 0 view .LVU565
 1981 00ee 2A46     		mov	r2, r5
 1982 00f0 2146     		mov	r1, r4
 1983 00f2 3046     		mov	r0, r6
 1984 00f4 B847     		blx	r7
 1985              	.LVL202:
 1986 00f6 0346     		mov	r3, r0
 1987 00f8 EFE7     		b	.L189
 1988              	.LVL203:
 1989              	.L184:
 379:nanopb/pb_encode.c ****     }
 1990              		.loc 1 379 13 is_stmt 1 view .LVU566
 1991 00fa 3369     		ldr	r3, [r6, #16]
 1992 00fc 13B1     		cbz	r3, .L201
 1993              	.L190:
 379:nanopb/pb_encode.c ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 57


 1994              		.loc 1 379 13 is_stmt 0 discriminator 4 view .LVU567
 1995 00fe 3361     		str	r3, [r6, #16]
 1996 0100 0023     		movs	r3, #0
 1997 0102 EAE7     		b	.L189
 1998              	.L201:
 379:nanopb/pb_encode.c ****     }
 1999              		.loc 1 379 13 view .LVU568
 2000 0104 024B     		ldr	r3, .L202+8
 2001 0106 FAE7     		b	.L190
 2002              	.L203:
 2003              		.align	2
 2004              	.L202:
 2005 0108 00000000 		.word	.LANCHOR0
 2006 010c 00000000 		.word	.LC6
 2007 0110 00000000 		.word	.LC4
 2008              		.cfi_endproc
 2009              	.LFE5:
 2011              		.section	.text.encode_field,"ax",%progbits
 2012              		.align	1
 2013              		.syntax unified
 2014              		.thumb
 2015              		.thumb_func
 2016              		.fpu softvfp
 2018              	encode_field:
 2019              	.LVL204:
 2020              	.LFB7:
 409:nanopb/pb_encode.c ****     switch (PB_ATYPE(field->type))
 2021              		.loc 1 409 1 is_stmt 1 view -0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 409:nanopb/pb_encode.c ****     switch (PB_ATYPE(field->type))
 2025              		.loc 1 409 1 is_stmt 0 view .LVU570
 2026 0000 08B5     		push	{r3, lr}
 2027              	.LCFI36:
 2028              		.cfi_def_cfa_offset 8
 2029              		.cfi_offset 3, -8
 2030              		.cfi_offset 14, -4
 410:nanopb/pb_encode.c ****     {
 2031              		.loc 1 410 5 is_stmt 1 view .LVU571
 410:nanopb/pb_encode.c ****     {
 2032              		.loc 1 410 13 is_stmt 0 view .LVU572
 2033 0002 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 2034 0004 03F0C003 		and	r3, r3, #192
 410:nanopb/pb_encode.c ****     {
 2035              		.loc 1 410 5 view .LVU573
 2036 0008 402B     		cmp	r3, #64
 2037 000a 0AD0     		beq	.L205
 2038 000c 802B     		cmp	r3, #128
 2039 000e 05D0     		beq	.L206
 2040 0010 23B1     		cbz	r3, .L206
 420:nanopb/pb_encode.c ****     }
 2041              		.loc 1 420 13 is_stmt 1 view .LVU574
 2042 0012 0369     		ldr	r3, [r0, #16]
 2043 0014 43B1     		cbz	r3, .L211
 2044              	.L209:
 420:nanopb/pb_encode.c ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 58


 2045              		.loc 1 420 13 is_stmt 0 discriminator 4 view .LVU575
 2046 0016 0361     		str	r3, [r0, #16]
 2047 0018 0020     		movs	r0, #0
 2048              	.LVL205:
 420:nanopb/pb_encode.c ****     }
 2049              		.loc 1 420 13 discriminator 4 view .LVU576
 2050 001a 01E0     		b	.L208
 2051              	.LVL206:
 2052              	.L206:
 414:nanopb/pb_encode.c ****         
 2053              		.loc 1 414 13 is_stmt 1 view .LVU577
 414:nanopb/pb_encode.c ****         
 2054              		.loc 1 414 20 is_stmt 0 view .LVU578
 2055 001c FFF7FEFF 		bl	encode_basic_field
 2056              	.LVL207:
 2057              	.L208:
 422:nanopb/pb_encode.c **** 
 2058              		.loc 1 422 1 view .LVU579
 2059 0020 08BD     		pop	{r3, pc}
 2060              	.LVL208:
 2061              	.L205:
 417:nanopb/pb_encode.c ****         
 2062              		.loc 1 417 13 is_stmt 1 view .LVU580
 417:nanopb/pb_encode.c ****         
 2063              		.loc 1 417 20 is_stmt 0 view .LVU581
 2064 0022 FFF7FEFF 		bl	encode_callback_field
 2065              	.LVL209:
 417:nanopb/pb_encode.c ****         
 2066              		.loc 1 417 20 view .LVU582
 2067 0026 FBE7     		b	.L208
 2068              	.LVL210:
 2069              	.L211:
 420:nanopb/pb_encode.c ****     }
 2070              		.loc 1 420 13 view .LVU583
 2071 0028 004B     		ldr	r3, .L212
 2072 002a F4E7     		b	.L209
 2073              	.L213:
 2074              		.align	2
 2075              	.L212:
 2076 002c 00000000 		.word	.LC4
 2077              		.cfi_endproc
 2078              	.LFE7:
 2080              		.section	.text.default_extension_encoder,"ax",%progbits
 2081              		.align	1
 2082              		.syntax unified
 2083              		.thumb
 2084              		.thumb_func
 2085              		.fpu softvfp
 2087              	default_extension_encoder:
 2088              	.LVL211:
 2089              	.LFB8:
 428:nanopb/pb_encode.c ****     const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 2090              		.loc 1 428 1 is_stmt 1 view -0
 2091              		.cfi_startproc
 2092              		@ args = 0, pretend = 0, frame = 0
 2093              		@ frame_needed = 0, uses_anonymous_args = 0
 428:nanopb/pb_encode.c ****     const pb_field_t *field = (const pb_field_t*)extension->type->arg;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 59


 2094              		.loc 1 428 1 is_stmt 0 view .LVU585
 2095 0000 08B5     		push	{r3, lr}
 2096              	.LCFI37:
 2097              		.cfi_def_cfa_offset 8
 2098              		.cfi_offset 3, -8
 2099              		.cfi_offset 14, -4
 2100 0002 0A46     		mov	r2, r1
 429:nanopb/pb_encode.c ****     
 2101              		.loc 1 429 5 is_stmt 1 view .LVU586
 429:nanopb/pb_encode.c ****     
 2102              		.loc 1 429 59 is_stmt 0 view .LVU587
 2103 0004 0B68     		ldr	r3, [r1]
 429:nanopb/pb_encode.c ****     
 2104              		.loc 1 429 23 view .LVU588
 2105 0006 9968     		ldr	r1, [r3, #8]
 2106              	.LVL212:
 431:nanopb/pb_encode.c ****     {
 2107              		.loc 1 431 5 is_stmt 1 view .LVU589
 431:nanopb/pb_encode.c ****     {
 2108              		.loc 1 431 9 is_stmt 0 view .LVU590
 2109 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 431:nanopb/pb_encode.c ****     {
 2110              		.loc 1 431 8 view .LVU591
 2111 000a 03F0C003 		and	r3, r3, #192
 2112 000e 802B     		cmp	r3, #128
 2113 0010 03D0     		beq	.L218
 440:nanopb/pb_encode.c ****     }
 2114              		.loc 1 440 9 is_stmt 1 view .LVU592
 440:nanopb/pb_encode.c ****     }
 2115              		.loc 1 440 16 is_stmt 0 view .LVU593
 2116 0012 5268     		ldr	r2, [r2, #4]
 2117              	.LVL213:
 440:nanopb/pb_encode.c ****     }
 2118              		.loc 1 440 16 view .LVU594
 2119 0014 FFF7FEFF 		bl	encode_field
 2120              	.LVL214:
 2121              	.L216:
 442:nanopb/pb_encode.c **** 
 2122              		.loc 1 442 1 view .LVU595
 2123 0018 08BD     		pop	{r3, pc}
 2124              	.LVL215:
 2125              	.L218:
 436:nanopb/pb_encode.c ****     }
 2126              		.loc 1 436 9 is_stmt 1 view .LVU596
 436:nanopb/pb_encode.c ****     }
 2127              		.loc 1 436 16 is_stmt 0 view .LVU597
 2128 001a 0432     		adds	r2, r2, #4
 2129              	.LVL216:
 436:nanopb/pb_encode.c ****     }
 2130              		.loc 1 436 16 view .LVU598
 2131 001c FFF7FEFF 		bl	encode_field
 2132              	.LVL217:
 436:nanopb/pb_encode.c ****     }
 2133              		.loc 1 436 16 view .LVU599
 2134 0020 FAE7     		b	.L216
 2135              		.cfi_endproc
 2136              	.LFE8:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 60


 2138              		.section	.text.encode_extension_field,"ax",%progbits
 2139              		.align	1
 2140              		.syntax unified
 2141              		.thumb
 2142              		.thumb_func
 2143              		.fpu softvfp
 2145              	encode_extension_field:
 2146              	.LVL218:
 2147              	.LFB9:
 448:nanopb/pb_encode.c ****     const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 2148              		.loc 1 448 1 is_stmt 1 view -0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 448:nanopb/pb_encode.c ****     const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 2152              		.loc 1 448 1 is_stmt 0 view .LVU601
 2153 0000 38B5     		push	{r3, r4, r5, lr}
 2154              	.LCFI38:
 2155              		.cfi_def_cfa_offset 16
 2156              		.cfi_offset 3, -16
 2157              		.cfi_offset 4, -12
 2158              		.cfi_offset 5, -8
 2159              		.cfi_offset 14, -4
 2160 0002 0546     		mov	r5, r0
 449:nanopb/pb_encode.c ****     PB_UNUSED(field);
 2161              		.loc 1 449 5 is_stmt 1 view .LVU602
 449:nanopb/pb_encode.c ****     PB_UNUSED(field);
 2162              		.loc 1 449 27 is_stmt 0 view .LVU603
 2163 0004 1468     		ldr	r4, [r2]
 2164              	.LVL219:
 450:nanopb/pb_encode.c ****     
 2165              		.loc 1 450 5 is_stmt 1 view .LVU604
 452:nanopb/pb_encode.c ****     {
 2166              		.loc 1 452 5 view .LVU605
 452:nanopb/pb_encode.c ****     {
 2167              		.loc 1 452 11 is_stmt 0 view .LVU606
 2168 0006 05E0     		b	.L220
 2169              	.LVL220:
 2170              	.L221:
 2171              	.LBB9:
 458:nanopb/pb_encode.c **** 
 2172              		.loc 1 458 13 is_stmt 1 view .LVU607
 458:nanopb/pb_encode.c **** 
 2173              		.loc 1 458 22 is_stmt 0 view .LVU608
 2174 0008 2146     		mov	r1, r4
 2175 000a 2846     		mov	r0, r5
 2176 000c FFF7FEFF 		bl	default_extension_encoder
 2177              	.LVL221:
 2178              	.L222:
 460:nanopb/pb_encode.c ****             return false;
 2179              		.loc 1 460 9 is_stmt 1 view .LVU609
 460:nanopb/pb_encode.c ****             return false;
 2180              		.loc 1 460 12 is_stmt 0 view .LVU610
 2181 0010 50B1     		cbz	r0, .L223
 463:nanopb/pb_encode.c ****     }
 2182              		.loc 1 463 9 is_stmt 1 view .LVU611
 463:nanopb/pb_encode.c ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 61


 2183              		.loc 1 463 19 is_stmt 0 view .LVU612
 2184 0012 A468     		ldr	r4, [r4, #8]
 2185              	.LVL222:
 2186              	.L220:
 463:nanopb/pb_encode.c ****     }
 2187              		.loc 1 463 19 view .LVU613
 2188              	.LBE9:
 452:nanopb/pb_encode.c ****     {
 2189              		.loc 1 452 11 view .LVU614
 2190 0014 3CB1     		cbz	r4, .L226
 2191              	.LBB10:
 454:nanopb/pb_encode.c ****         if (extension->type->encode)
 2192              		.loc 1 454 9 is_stmt 1 view .LVU615
 455:nanopb/pb_encode.c ****             status = extension->type->encode(stream, extension);
 2193              		.loc 1 455 9 view .LVU616
 455:nanopb/pb_encode.c ****             status = extension->type->encode(stream, extension);
 2194              		.loc 1 455 22 is_stmt 0 view .LVU617
 2195 0016 2368     		ldr	r3, [r4]
 455:nanopb/pb_encode.c ****             status = extension->type->encode(stream, extension);
 2196              		.loc 1 455 28 view .LVU618
 2197 0018 5B68     		ldr	r3, [r3, #4]
 455:nanopb/pb_encode.c ****             status = extension->type->encode(stream, extension);
 2198              		.loc 1 455 12 view .LVU619
 2199 001a 002B     		cmp	r3, #0
 2200 001c F4D0     		beq	.L221
 456:nanopb/pb_encode.c ****         else
 2201              		.loc 1 456 13 is_stmt 1 view .LVU620
 456:nanopb/pb_encode.c ****         else
 2202              		.loc 1 456 22 is_stmt 0 view .LVU621
 2203 001e 2146     		mov	r1, r4
 2204 0020 2846     		mov	r0, r5
 2205 0022 9847     		blx	r3
 2206              	.LVL223:
 456:nanopb/pb_encode.c ****         else
 2207              		.loc 1 456 22 view .LVU622
 2208 0024 F4E7     		b	.L222
 2209              	.LVL224:
 2210              	.L226:
 456:nanopb/pb_encode.c ****         else
 2211              		.loc 1 456 22 view .LVU623
 2212              	.LBE10:
 466:nanopb/pb_encode.c **** }
 2213              		.loc 1 466 12 view .LVU624
 2214 0026 0120     		movs	r0, #1
 2215              	.L223:
 467:nanopb/pb_encode.c **** 
 2216              		.loc 1 467 1 view .LVU625
 2217 0028 38BD     		pop	{r3, r4, r5, pc}
 467:nanopb/pb_encode.c **** 
 2218              		.loc 1 467 1 view .LVU626
 2219              		.cfi_endproc
 2220              	.LFE9:
 2222              		.section	.text.pb_encode,"ax",%progbits
 2223              		.align	1
 2224              		.global	pb_encode
 2225              		.syntax unified
 2226              		.thumb
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 62


 2227              		.thumb_func
 2228              		.fpu softvfp
 2230              	pb_encode:
 2231              	.LVL225:
 2232              	.LFB11:
 486:nanopb/pb_encode.c ****     pb_field_iter_t iter;
 2233              		.loc 1 486 1 is_stmt 1 view -0
 2234              		.cfi_startproc
 2235              		@ args = 0, pretend = 0, frame = 24
 2236              		@ frame_needed = 0, uses_anonymous_args = 0
 486:nanopb/pb_encode.c ****     pb_field_iter_t iter;
 2237              		.loc 1 486 1 is_stmt 0 view .LVU628
 2238 0000 30B5     		push	{r4, r5, lr}
 2239              	.LCFI39:
 2240              		.cfi_def_cfa_offset 12
 2241              		.cfi_offset 4, -12
 2242              		.cfi_offset 5, -8
 2243              		.cfi_offset 14, -4
 2244 0002 87B0     		sub	sp, sp, #28
 2245              	.LCFI40:
 2246              		.cfi_def_cfa_offset 40
 2247 0004 0446     		mov	r4, r0
 2248 0006 0D46     		mov	r5, r1
 487:nanopb/pb_encode.c ****     if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 2249              		.loc 1 487 5 is_stmt 1 view .LVU629
 488:nanopb/pb_encode.c ****         return true; /* Empty message type */
 2250              		.loc 1 488 5 view .LVU630
 488:nanopb/pb_encode.c ****         return true; /* Empty message type */
 2251              		.loc 1 488 10 is_stmt 0 view .LVU631
 2252 0008 1046     		mov	r0, r2
 2253              	.LVL226:
 488:nanopb/pb_encode.c ****         return true; /* Empty message type */
 2254              		.loc 1 488 10 view .LVU632
 2255 000a FFF7FEFF 		bl	pb_const_cast
 2256              	.LVL227:
 488:nanopb/pb_encode.c ****         return true; /* Empty message type */
 2257              		.loc 1 488 10 view .LVU633
 2258 000e 0246     		mov	r2, r0
 2259 0010 2946     		mov	r1, r5
 2260 0012 6846     		mov	r0, sp
 2261 0014 FFF7FEFF 		bl	pb_field_iter_begin
 2262              	.LVL228:
 488:nanopb/pb_encode.c ****         return true; /* Empty message type */
 2263              		.loc 1 488 8 view .LVU634
 2264 0018 0546     		mov	r5, r0
 2265              	.LVL229:
 488:nanopb/pb_encode.c ****         return true; /* Empty message type */
 2266              		.loc 1 488 8 view .LVU635
 2267 001a 68B9     		cbnz	r0, .L231
 489:nanopb/pb_encode.c ****     
 2268              		.loc 1 489 16 view .LVU636
 2269 001c 0125     		movs	r5, #1
 2270              	.L228:
 507:nanopb/pb_encode.c **** 
 2271              		.loc 1 507 1 view .LVU637
 2272 001e 2846     		mov	r0, r5
 2273 0020 07B0     		add	sp, sp, #28
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 63


 2274              	.LCFI41:
 2275              		.cfi_remember_state
 2276              		.cfi_def_cfa_offset 12
 2277              		@ sp needed
 2278 0022 30BD     		pop	{r4, r5, pc}
 2279              	.LVL230:
 2280              	.L236:
 2281              	.LCFI42:
 2282              		.cfi_restore_state
 495:nanopb/pb_encode.c ****                 return false;
 2283              		.loc 1 495 13 is_stmt 1 view .LVU638
 495:nanopb/pb_encode.c ****                 return false;
 2284              		.loc 1 495 18 is_stmt 0 view .LVU639
 2285 0024 049A     		ldr	r2, [sp, #16]
 2286 0026 2046     		mov	r0, r4
 2287 0028 FFF7FEFF 		bl	encode_extension_field
 2288              	.LVL231:
 495:nanopb/pb_encode.c ****                 return false;
 2289              		.loc 1 495 16 view .LVU640
 2290 002c 90B1     		cbz	r0, .L235
 2291              	.L230:
 504:nanopb/pb_encode.c ****     
 2292              		.loc 1 504 14 view .LVU641
 2293 002e 6846     		mov	r0, sp
 2294 0030 FFF7FEFF 		bl	pb_field_iter_next
 2295              	.LVL232:
 504:nanopb/pb_encode.c ****     
 2296              		.loc 1 504 5 view .LVU642
 2297 0034 0028     		cmp	r0, #0
 2298 0036 F2D0     		beq	.L228
 2299              	.L231:
 491:nanopb/pb_encode.c ****         if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 2300              		.loc 1 491 5 is_stmt 1 view .LVU643
 492:nanopb/pb_encode.c ****         {
 2301              		.loc 1 492 9 view .LVU644
 492:nanopb/pb_encode.c ****         {
 2302              		.loc 1 492 13 is_stmt 0 view .LVU645
 2303 0038 0199     		ldr	r1, [sp, #4]
 2304 003a 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 492:nanopb/pb_encode.c ****         {
 2305              		.loc 1 492 12 view .LVU646
 2306 003c 03F00F03 		and	r3, r3, #15
 2307 0040 082B     		cmp	r3, #8
 2308 0042 EFD0     		beq	.L236
 501:nanopb/pb_encode.c ****                 return false;
 2309              		.loc 1 501 13 is_stmt 1 view .LVU647
 501:nanopb/pb_encode.c ****                 return false;
 2310              		.loc 1 501 18 is_stmt 0 view .LVU648
 2311 0044 049A     		ldr	r2, [sp, #16]
 2312 0046 2046     		mov	r0, r4
 2313 0048 FFF7FEFF 		bl	encode_field
 2314              	.LVL233:
 501:nanopb/pb_encode.c ****                 return false;
 2315              		.loc 1 501 16 view .LVU649
 2316 004c 0028     		cmp	r0, #0
 2317 004e EED1     		bne	.L230
 502:nanopb/pb_encode.c ****         }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 64


 2318              		.loc 1 502 24 view .LVU650
 2319 0050 0546     		mov	r5, r0
 2320 0052 E4E7     		b	.L228
 2321              	.L235:
 496:nanopb/pb_encode.c ****         }
 2322              		.loc 1 496 24 view .LVU651
 2323 0054 0546     		mov	r5, r0
 2324 0056 E2E7     		b	.L228
 2325              		.cfi_endproc
 2326              	.LFE11:
 2328              		.section	.text.pb_encode_nullterminated,"ax",%progbits
 2329              		.align	1
 2330              		.global	pb_encode_nullterminated
 2331              		.syntax unified
 2332              		.thumb
 2333              		.thumb_func
 2334              		.fpu softvfp
 2336              	pb_encode_nullterminated:
 2337              	.LVL234:
 2338              	.LFB13:
 515:nanopb/pb_encode.c ****     const pb_byte_t zero = 0;
 2339              		.loc 1 515 1 is_stmt 1 view -0
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 8
 2342              		@ frame_needed = 0, uses_anonymous_args = 0
 515:nanopb/pb_encode.c ****     const pb_byte_t zero = 0;
 2343              		.loc 1 515 1 is_stmt 0 view .LVU653
 2344 0000 10B5     		push	{r4, lr}
 2345              	.LCFI43:
 2346              		.cfi_def_cfa_offset 8
 2347              		.cfi_offset 4, -8
 2348              		.cfi_offset 14, -4
 2349 0002 82B0     		sub	sp, sp, #8
 2350              	.LCFI44:
 2351              		.cfi_def_cfa_offset 16
 2352 0004 0446     		mov	r4, r0
 516:nanopb/pb_encode.c **** 
 2353              		.loc 1 516 5 is_stmt 1 view .LVU654
 516:nanopb/pb_encode.c **** 
 2354              		.loc 1 516 21 is_stmt 0 view .LVU655
 2355 0006 0023     		movs	r3, #0
 2356 0008 8DF80730 		strb	r3, [sp, #7]
 518:nanopb/pb_encode.c ****         return false;
 2357              		.loc 1 518 5 is_stmt 1 view .LVU656
 518:nanopb/pb_encode.c ****         return false;
 2358              		.loc 1 518 10 is_stmt 0 view .LVU657
 2359 000c FFF7FEFF 		bl	pb_encode
 2360              	.LVL235:
 518:nanopb/pb_encode.c ****         return false;
 2361              		.loc 1 518 8 view .LVU658
 2362 0010 0346     		mov	r3, r0
 2363 0012 10B9     		cbnz	r0, .L240
 2364              	.L238:
 522:nanopb/pb_encode.c **** 
 2365              		.loc 1 522 1 view .LVU659
 2366 0014 1846     		mov	r0, r3
 2367 0016 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 65


 2368              	.LCFI45:
 2369              		.cfi_remember_state
 2370              		.cfi_def_cfa_offset 8
 2371              		@ sp needed
 2372 0018 10BD     		pop	{r4, pc}
 2373              	.LVL236:
 2374              	.L240:
 2375              	.LCFI46:
 2376              		.cfi_restore_state
 521:nanopb/pb_encode.c **** }
 2377              		.loc 1 521 5 is_stmt 1 view .LVU660
 521:nanopb/pb_encode.c **** }
 2378              		.loc 1 521 12 is_stmt 0 view .LVU661
 2379 001a 0122     		movs	r2, #1
 2380 001c 0DF10701 		add	r1, sp, #7
 2381 0020 2046     		mov	r0, r4
 2382 0022 FFF7FEFF 		bl	pb_write
 2383              	.LVL237:
 2384 0026 0346     		mov	r3, r0
 2385 0028 F4E7     		b	.L238
 2386              		.cfi_endproc
 2387              	.LFE13:
 2389              		.section	.text.pb_get_encoded_size,"ax",%progbits
 2390              		.align	1
 2391              		.global	pb_get_encoded_size
 2392              		.syntax unified
 2393              		.thumb
 2394              		.thumb_func
 2395              		.fpu softvfp
 2397              	pb_get_encoded_size:
 2398              	.LVL238:
 2399              	.LFB14:
 525:nanopb/pb_encode.c ****     pb_ostream_t stream = PB_OSTREAM_SIZING;
 2400              		.loc 1 525 1 is_stmt 1 view -0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 24
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 525:nanopb/pb_encode.c ****     pb_ostream_t stream = PB_OSTREAM_SIZING;
 2404              		.loc 1 525 1 is_stmt 0 view .LVU663
 2405 0000 10B5     		push	{r4, lr}
 2406              	.LCFI47:
 2407              		.cfi_def_cfa_offset 8
 2408              		.cfi_offset 4, -8
 2409              		.cfi_offset 14, -4
 2410 0002 86B0     		sub	sp, sp, #24
 2411              	.LCFI48:
 2412              		.cfi_def_cfa_offset 32
 2413 0004 0446     		mov	r4, r0
 526:nanopb/pb_encode.c ****     
 2414              		.loc 1 526 5 is_stmt 1 view .LVU664
 526:nanopb/pb_encode.c ****     
 2415              		.loc 1 526 18 is_stmt 0 view .LVU665
 2416 0006 0023     		movs	r3, #0
 2417 0008 0193     		str	r3, [sp, #4]
 2418 000a 0293     		str	r3, [sp, #8]
 2419 000c 0393     		str	r3, [sp, #12]
 2420 000e 0493     		str	r3, [sp, #16]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 66


 2421 0010 0593     		str	r3, [sp, #20]
 528:nanopb/pb_encode.c ****         return false;
 2422              		.loc 1 528 5 is_stmt 1 view .LVU666
 528:nanopb/pb_encode.c ****         return false;
 2423              		.loc 1 528 10 is_stmt 0 view .LVU667
 2424 0012 01A8     		add	r0, sp, #4
 2425              	.LVL239:
 528:nanopb/pb_encode.c ****         return false;
 2426              		.loc 1 528 10 view .LVU668
 2427 0014 FFF7FEFF 		bl	pb_encode
 2428              	.LVL240:
 528:nanopb/pb_encode.c ****         return false;
 2429              		.loc 1 528 8 view .LVU669
 2430 0018 0346     		mov	r3, r0
 2431 001a 08B1     		cbz	r0, .L242
 531:nanopb/pb_encode.c ****     return true;
 2432              		.loc 1 531 5 is_stmt 1 view .LVU670
 531:nanopb/pb_encode.c ****     return true;
 2433              		.loc 1 531 19 is_stmt 0 view .LVU671
 2434 001c 049A     		ldr	r2, [sp, #16]
 531:nanopb/pb_encode.c ****     return true;
 2435              		.loc 1 531 11 view .LVU672
 2436 001e 2260     		str	r2, [r4]
 532:nanopb/pb_encode.c **** }
 2437              		.loc 1 532 5 is_stmt 1 view .LVU673
 2438              	.L242:
 533:nanopb/pb_encode.c **** 
 2439              		.loc 1 533 1 is_stmt 0 view .LVU674
 2440 0020 1846     		mov	r0, r3
 2441 0022 06B0     		add	sp, sp, #24
 2442              	.LCFI49:
 2443              		.cfi_def_cfa_offset 8
 2444              		@ sp needed
 2445 0024 10BD     		pop	{r4, pc}
 533:nanopb/pb_encode.c **** 
 2446              		.loc 1 533 1 view .LVU675
 2447              		.cfi_endproc
 2448              	.LFE14:
 2450              		.section	.text.pb_encode_string,"ax",%progbits
 2451              		.align	1
 2452              		.global	pb_encode_string
 2453              		.syntax unified
 2454              		.thumb
 2455              		.thumb_func
 2456              		.fpu softvfp
 2458              	pb_encode_string:
 2459              	.LVL241:
 2460              	.LFB21:
 639:nanopb/pb_encode.c ****     if (!pb_encode_varint(stream, (pb_uint64_t)size))
 2461              		.loc 1 639 1 is_stmt 1 view -0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 639:nanopb/pb_encode.c ****     if (!pb_encode_varint(stream, (pb_uint64_t)size))
 2465              		.loc 1 639 1 is_stmt 0 view .LVU677
 2466 0000 70B5     		push	{r4, r5, r6, lr}
 2467              	.LCFI50:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 67


 2468              		.cfi_def_cfa_offset 16
 2469              		.cfi_offset 4, -16
 2470              		.cfi_offset 5, -12
 2471              		.cfi_offset 6, -8
 2472              		.cfi_offset 14, -4
 2473 0002 0446     		mov	r4, r0
 2474 0004 0D46     		mov	r5, r1
 2475 0006 1646     		mov	r6, r2
 640:nanopb/pb_encode.c ****         return false;
 2476              		.loc 1 640 5 is_stmt 1 view .LVU678
 640:nanopb/pb_encode.c ****         return false;
 2477              		.loc 1 640 10 is_stmt 0 view .LVU679
 2478 0008 0023     		movs	r3, #0
 2479 000a FFF7FEFF 		bl	pb_encode_varint
 2480              	.LVL242:
 640:nanopb/pb_encode.c ****         return false;
 2481              		.loc 1 640 8 view .LVU680
 2482 000e 0346     		mov	r3, r0
 2483 0010 08B9     		cbnz	r0, .L247
 2484              	.L245:
 644:nanopb/pb_encode.c **** 
 2485              		.loc 1 644 1 view .LVU681
 2486 0012 1846     		mov	r0, r3
 2487 0014 70BD     		pop	{r4, r5, r6, pc}
 2488              	.LVL243:
 2489              	.L247:
 643:nanopb/pb_encode.c **** }
 2490              		.loc 1 643 5 is_stmt 1 view .LVU682
 643:nanopb/pb_encode.c **** }
 2491              		.loc 1 643 12 is_stmt 0 view .LVU683
 2492 0016 3246     		mov	r2, r6
 2493 0018 2946     		mov	r1, r5
 2494 001a 2046     		mov	r0, r4
 2495 001c FFF7FEFF 		bl	pb_write
 2496              	.LVL244:
 2497 0020 0346     		mov	r3, r0
 2498 0022 F6E7     		b	.L245
 2499              		.cfi_endproc
 2500              	.LFE21:
 2502              		.section	.text.pb_enc_fixed_length_bytes,"ax",%progbits
 2503              		.align	1
 2504              		.syntax unified
 2505              		.thumb
 2506              		.thumb_func
 2507              		.fpu softvfp
 2509              	pb_enc_fixed_length_bytes:
 2510              	.LVL245:
 2511              	.LFB31:
 768:nanopb/pb_encode.c **** 
 769:nanopb/pb_encode.c **** static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src
 770:nanopb/pb_encode.c **** {
 771:nanopb/pb_encode.c ****     const pb_bytes_array_t *bytes = NULL;
 772:nanopb/pb_encode.c **** 
 773:nanopb/pb_encode.c ****     bytes = (const pb_bytes_array_t*)src;
 774:nanopb/pb_encode.c ****     
 775:nanopb/pb_encode.c ****     if (src == NULL)
 776:nanopb/pb_encode.c ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 68


 777:nanopb/pb_encode.c ****         /* Treat null pointer as an empty bytes field */
 778:nanopb/pb_encode.c ****         return pb_encode_string(stream, NULL, 0);
 779:nanopb/pb_encode.c ****     }
 780:nanopb/pb_encode.c ****     
 781:nanopb/pb_encode.c ****     if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 782:nanopb/pb_encode.c ****         PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 783:nanopb/pb_encode.c ****     {
 784:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "bytes size exceeded");
 785:nanopb/pb_encode.c ****     }
 786:nanopb/pb_encode.c ****     
 787:nanopb/pb_encode.c ****     return pb_encode_string(stream, bytes->bytes, bytes->size);
 788:nanopb/pb_encode.c **** }
 789:nanopb/pb_encode.c **** 
 790:nanopb/pb_encode.c **** static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *sr
 791:nanopb/pb_encode.c **** {
 792:nanopb/pb_encode.c ****     size_t size = 0;
 793:nanopb/pb_encode.c ****     size_t max_size = field->data_size;
 794:nanopb/pb_encode.c ****     const char *p = (const char*)src;
 795:nanopb/pb_encode.c ****     
 796:nanopb/pb_encode.c ****     if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 797:nanopb/pb_encode.c ****         max_size = (size_t)-1;
 798:nanopb/pb_encode.c **** 
 799:nanopb/pb_encode.c ****     if (src == NULL)
 800:nanopb/pb_encode.c ****     {
 801:nanopb/pb_encode.c ****         size = 0; /* Treat null pointer as an empty string */
 802:nanopb/pb_encode.c ****     }
 803:nanopb/pb_encode.c ****     else
 804:nanopb/pb_encode.c ****     {
 805:nanopb/pb_encode.c ****         /* strnlen() is not always available, so just use a loop */
 806:nanopb/pb_encode.c ****         while (size < max_size && *p != '\0')
 807:nanopb/pb_encode.c ****         {
 808:nanopb/pb_encode.c ****             size++;
 809:nanopb/pb_encode.c ****             p++;
 810:nanopb/pb_encode.c ****         }
 811:nanopb/pb_encode.c ****     }
 812:nanopb/pb_encode.c **** 
 813:nanopb/pb_encode.c ****     return pb_encode_string(stream, (const pb_byte_t*)src, size);
 814:nanopb/pb_encode.c **** }
 815:nanopb/pb_encode.c **** 
 816:nanopb/pb_encode.c **** static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void
 817:nanopb/pb_encode.c **** {
 818:nanopb/pb_encode.c ****     if (field->ptr == NULL)
 819:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid field descriptor");
 820:nanopb/pb_encode.c ****     
 821:nanopb/pb_encode.c ****     return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 822:nanopb/pb_encode.c **** }
 823:nanopb/pb_encode.c **** 
 824:nanopb/pb_encode.c **** static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, co
 825:nanopb/pb_encode.c **** {
 2512              		.loc 1 825 1 is_stmt 1 view -0
 2513              		.cfi_startproc
 2514              		@ args = 0, pretend = 0, frame = 0
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516              		.loc 1 825 1 is_stmt 0 view .LVU685
 2517 0000 08B5     		push	{r3, lr}
 2518              	.LCFI51:
 2519              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 69


 2520              		.cfi_offset 3, -8
 2521              		.cfi_offset 14, -4
 2522 0002 1346     		mov	r3, r2
 826:nanopb/pb_encode.c ****     return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 2523              		.loc 1 826 5 is_stmt 1 view .LVU686
 2524              		.loc 1 826 12 is_stmt 0 view .LVU687
 2525 0004 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 2526              	.LVL246:
 2527              		.loc 1 826 12 view .LVU688
 2528 0006 1946     		mov	r1, r3
 2529              	.LVL247:
 2530              		.loc 1 826 12 view .LVU689
 2531 0008 FFF7FEFF 		bl	pb_encode_string
 2532              	.LVL248:
 827:nanopb/pb_encode.c **** }
 2533              		.loc 1 827 1 view .LVU690
 2534 000c 08BD     		pop	{r3, pc}
 2535              		.cfi_endproc
 2536              	.LFE31:
 2538              		.section	.text.pb_enc_string,"ax",%progbits
 2539              		.align	1
 2540              		.syntax unified
 2541              		.thumb
 2542              		.thumb_func
 2543              		.fpu softvfp
 2545              	pb_enc_string:
 2546              	.LVL249:
 2547              	.LFB29:
 791:nanopb/pb_encode.c ****     size_t size = 0;
 2548              		.loc 1 791 1 is_stmt 1 view -0
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 0, uses_anonymous_args = 0
 791:nanopb/pb_encode.c ****     size_t size = 0;
 2552              		.loc 1 791 1 is_stmt 0 view .LVU692
 2553 0000 38B5     		push	{r3, r4, r5, lr}
 2554              	.LCFI52:
 2555              		.cfi_def_cfa_offset 16
 2556              		.cfi_offset 3, -16
 2557              		.cfi_offset 4, -12
 2558              		.cfi_offset 5, -8
 2559              		.cfi_offset 14, -4
 2560 0002 0B46     		mov	r3, r1
 2561 0004 1146     		mov	r1, r2
 2562              	.LVL250:
 792:nanopb/pb_encode.c ****     size_t max_size = field->data_size;
 2563              		.loc 1 792 5 is_stmt 1 view .LVU693
 793:nanopb/pb_encode.c ****     const char *p = (const char*)src;
 2564              		.loc 1 793 5 view .LVU694
 793:nanopb/pb_encode.c ****     const char *p = (const char*)src;
 2565              		.loc 1 793 28 is_stmt 0 view .LVU695
 2566 0006 1D79     		ldrb	r5, [r3, #4]	@ zero_extendqisi2
 2567              	.LVL251:
 794:nanopb/pb_encode.c ****     
 2568              		.loc 1 794 5 is_stmt 1 view .LVU696
 796:nanopb/pb_encode.c ****         max_size = (size_t)-1;
 2569              		.loc 1 796 5 view .LVU697
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 70


 796:nanopb/pb_encode.c ****         max_size = (size_t)-1;
 2570              		.loc 1 796 9 is_stmt 0 view .LVU698
 2571 0008 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2572              	.LVL252:
 796:nanopb/pb_encode.c ****         max_size = (size_t)-1;
 2573              		.loc 1 796 8 view .LVU699
 2574 000a 03F0C003 		and	r3, r3, #192
 2575 000e 802B     		cmp	r3, #128
 2576 0010 03D0     		beq	.L258
 2577              	.LVL253:
 2578              	.L251:
 799:nanopb/pb_encode.c ****     {
 2579              		.loc 1 799 5 is_stmt 1 view .LVU700
 799:nanopb/pb_encode.c ****     {
 2580              		.loc 1 799 8 is_stmt 0 view .LVU701
 2581 0012 79B1     		cbz	r1, .L256
 794:nanopb/pb_encode.c ****     
 2582              		.loc 1 794 17 view .LVU702
 2583 0014 0B46     		mov	r3, r1
 792:nanopb/pb_encode.c ****     size_t max_size = field->data_size;
 2584              		.loc 1 792 12 view .LVU703
 2585 0016 0022     		movs	r2, #0
 2586              	.LVL254:
 792:nanopb/pb_encode.c ****     size_t max_size = field->data_size;
 2587              		.loc 1 792 12 view .LVU704
 2588 0018 04E0     		b	.L253
 2589              	.L258:
 797:nanopb/pb_encode.c **** 
 2590              		.loc 1 797 18 view .LVU705
 2591 001a 4FF0FF35 		mov	r5, #-1
 2592              	.LVL255:
 797:nanopb/pb_encode.c **** 
 2593              		.loc 1 797 18 view .LVU706
 2594 001e F8E7     		b	.L251
 2595              	.LVL256:
 2596              	.L254:
 808:nanopb/pb_encode.c ****             p++;
 2597              		.loc 1 808 13 is_stmt 1 view .LVU707
 808:nanopb/pb_encode.c ****             p++;
 2598              		.loc 1 808 17 is_stmt 0 view .LVU708
 2599 0020 0132     		adds	r2, r2, #1
 2600              	.LVL257:
 809:nanopb/pb_encode.c ****         }
 2601              		.loc 1 809 13 is_stmt 1 view .LVU709
 809:nanopb/pb_encode.c ****         }
 2602              		.loc 1 809 14 is_stmt 0 view .LVU710
 2603 0022 0133     		adds	r3, r3, #1
 2604              	.LVL258:
 2605              	.L253:
 806:nanopb/pb_encode.c ****         {
 2606              		.loc 1 806 15 view .LVU711
 2607 0024 AA42     		cmp	r2, r5
 2608 0026 02D2     		bcs	.L252
 806:nanopb/pb_encode.c ****         {
 2609              		.loc 1 806 35 discriminator 1 view .LVU712
 2610 0028 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 806:nanopb/pb_encode.c ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 71


 2611              		.loc 1 806 32 discriminator 1 view .LVU713
 2612 002a 002C     		cmp	r4, #0
 2613 002c F8D1     		bne	.L254
 2614              	.LVL259:
 2615              	.L252:
 813:nanopb/pb_encode.c **** }
 2616              		.loc 1 813 5 is_stmt 1 view .LVU714
 813:nanopb/pb_encode.c **** }
 2617              		.loc 1 813 12 is_stmt 0 view .LVU715
 2618 002e FFF7FEFF 		bl	pb_encode_string
 2619              	.LVL260:
 814:nanopb/pb_encode.c **** 
 2620              		.loc 1 814 1 view .LVU716
 2621 0032 38BD     		pop	{r3, r4, r5, pc}
 2622              	.LVL261:
 2623              	.L256:
 801:nanopb/pb_encode.c ****     }
 2624              		.loc 1 801 14 view .LVU717
 2625 0034 0022     		movs	r2, #0
 2626 0036 FAE7     		b	.L252
 2627              		.cfi_endproc
 2628              	.LFE29:
 2630              		.section	.text.pb_enc_bytes,"ax",%progbits
 2631              		.align	1
 2632              		.syntax unified
 2633              		.thumb
 2634              		.thumb_func
 2635              		.fpu softvfp
 2637              	pb_enc_bytes:
 2638              	.LVL262:
 2639              	.LFB28:
 770:nanopb/pb_encode.c ****     const pb_bytes_array_t *bytes = NULL;
 2640              		.loc 1 770 1 is_stmt 1 view -0
 2641              		.cfi_startproc
 2642              		@ args = 0, pretend = 0, frame = 0
 2643              		@ frame_needed = 0, uses_anonymous_args = 0
 770:nanopb/pb_encode.c ****     const pb_bytes_array_t *bytes = NULL;
 2644              		.loc 1 770 1 is_stmt 0 view .LVU719
 2645 0000 08B5     		push	{r3, lr}
 2646              	.LCFI53:
 2647              		.cfi_def_cfa_offset 8
 2648              		.cfi_offset 3, -8
 2649              		.cfi_offset 14, -4
 771:nanopb/pb_encode.c **** 
 2650              		.loc 1 771 5 is_stmt 1 view .LVU720
 2651              	.LVL263:
 773:nanopb/pb_encode.c ****     
 2652              		.loc 1 773 5 view .LVU721
 775:nanopb/pb_encode.c ****     {
 2653              		.loc 1 775 5 view .LVU722
 775:nanopb/pb_encode.c ****     {
 2654              		.loc 1 775 8 is_stmt 0 view .LVU723
 2655 0002 7AB1     		cbz	r2, .L265
 2656 0004 1346     		mov	r3, r2
 781:nanopb/pb_encode.c ****         PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 2657              		.loc 1 781 5 is_stmt 1 view .LVU724
 781:nanopb/pb_encode.c ****         PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 72


 2658              		.loc 1 781 9 is_stmt 0 view .LVU725
 2659 0006 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 2660              	.LVL264:
 781:nanopb/pb_encode.c ****         PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 2661              		.loc 1 781 8 view .LVU726
 2662 0008 12F0C00F 		tst	r2, #192
 2663 000c 04D1     		bne	.L262
 782:nanopb/pb_encode.c ****     {
 2664              		.loc 1 782 9 discriminator 1 view .LVU727
 2665 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2666 0010 0132     		adds	r2, r2, #1
 782:nanopb/pb_encode.c ****     {
 2667              		.loc 1 782 56 discriminator 1 view .LVU728
 2668 0012 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2669              	.LVL265:
 781:nanopb/pb_encode.c ****         PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 2670              		.loc 1 781 50 discriminator 1 view .LVU729
 2671 0014 8A42     		cmp	r2, r1
 2672 0016 09D8     		bhi	.L266
 2673              	.L262:
 787:nanopb/pb_encode.c **** }
 2674              		.loc 1 787 5 is_stmt 1 view .LVU730
 787:nanopb/pb_encode.c **** }
 2675              		.loc 1 787 42 is_stmt 0 view .LVU731
 2676 0018 1946     		mov	r1, r3
 787:nanopb/pb_encode.c **** }
 2677              		.loc 1 787 12 view .LVU732
 2678 001a 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 2679 001e FFF7FEFF 		bl	pb_encode_string
 2680              	.LVL266:
 2681              	.L261:
 788:nanopb/pb_encode.c **** 
 2682              		.loc 1 788 1 view .LVU733
 2683 0022 08BD     		pop	{r3, pc}
 2684              	.LVL267:
 2685              	.L265:
 778:nanopb/pb_encode.c ****     }
 2686              		.loc 1 778 9 is_stmt 1 view .LVU734
 778:nanopb/pb_encode.c ****     }
 2687              		.loc 1 778 16 is_stmt 0 view .LVU735
 2688 0024 1146     		mov	r1, r2
 2689              	.LVL268:
 778:nanopb/pb_encode.c ****     }
 2690              		.loc 1 778 16 view .LVU736
 2691 0026 FFF7FEFF 		bl	pb_encode_string
 2692              	.LVL269:
 778:nanopb/pb_encode.c ****     }
 2693              		.loc 1 778 16 view .LVU737
 2694 002a FAE7     		b	.L261
 2695              	.LVL270:
 2696              	.L266:
 784:nanopb/pb_encode.c ****     }
 2697              		.loc 1 784 9 is_stmt 1 view .LVU738
 2698 002c 0369     		ldr	r3, [r0, #16]
 2699              	.LVL271:
 784:nanopb/pb_encode.c ****     }
 2700              		.loc 1 784 9 is_stmt 0 view .LVU739
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 73


 2701 002e 13B1     		cbz	r3, .L267
 2702              	.L263:
 784:nanopb/pb_encode.c ****     }
 2703              		.loc 1 784 9 discriminator 4 view .LVU740
 2704 0030 0361     		str	r3, [r0, #16]
 2705 0032 0020     		movs	r0, #0
 2706              	.LVL272:
 784:nanopb/pb_encode.c ****     }
 2707              		.loc 1 784 9 discriminator 4 view .LVU741
 2708 0034 F5E7     		b	.L261
 2709              	.LVL273:
 2710              	.L267:
 784:nanopb/pb_encode.c ****     }
 2711              		.loc 1 784 9 view .LVU742
 2712 0036 014B     		ldr	r3, .L268
 2713 0038 FAE7     		b	.L263
 2714              	.L269:
 2715 003a 00BF     		.align	2
 2716              	.L268:
 2717 003c 00000000 		.word	.LC7
 2718              		.cfi_endproc
 2719              	.LFE28:
 2721              		.section	.text.pb_encode_submessage,"ax",%progbits
 2722              		.align	1
 2723              		.global	pb_encode_submessage
 2724              		.syntax unified
 2725              		.thumb
 2726              		.thumb_func
 2727              		.fpu softvfp
 2729              	pb_encode_submessage:
 2730              	.LVL274:
 2731              	.LFB22:
 647:nanopb/pb_encode.c ****     /* First calculate the message size using a non-writing substream. */
 2732              		.loc 1 647 1 is_stmt 1 view -0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 24
 2735              		@ frame_needed = 0, uses_anonymous_args = 0
 647:nanopb/pb_encode.c ****     /* First calculate the message size using a non-writing substream. */
 2736              		.loc 1 647 1 is_stmt 0 view .LVU744
 2737 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2738              	.LCFI54:
 2739              		.cfi_def_cfa_offset 20
 2740              		.cfi_offset 4, -20
 2741              		.cfi_offset 5, -16
 2742              		.cfi_offset 6, -12
 2743              		.cfi_offset 7, -8
 2744              		.cfi_offset 14, -4
 2745 0002 87B0     		sub	sp, sp, #28
 2746              	.LCFI55:
 2747              		.cfi_def_cfa_offset 48
 2748 0004 0446     		mov	r4, r0
 2749 0006 0E46     		mov	r6, r1
 2750 0008 1746     		mov	r7, r2
 649:nanopb/pb_encode.c ****     size_t size;
 2751              		.loc 1 649 5 is_stmt 1 view .LVU745
 649:nanopb/pb_encode.c ****     size_t size;
 2752              		.loc 1 649 18 is_stmt 0 view .LVU746
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 74


 2753 000a 0023     		movs	r3, #0
 2754 000c 0193     		str	r3, [sp, #4]
 2755 000e 0293     		str	r3, [sp, #8]
 2756 0010 0393     		str	r3, [sp, #12]
 2757 0012 0493     		str	r3, [sp, #16]
 2758 0014 0593     		str	r3, [sp, #20]
 650:nanopb/pb_encode.c ****     bool status;
 2759              		.loc 1 650 5 is_stmt 1 view .LVU747
 651:nanopb/pb_encode.c ****     
 2760              		.loc 1 651 5 view .LVU748
 653:nanopb/pb_encode.c ****     {
 2761              		.loc 1 653 5 view .LVU749
 653:nanopb/pb_encode.c ****     {
 2762              		.loc 1 653 10 is_stmt 0 view .LVU750
 2763 0016 01A8     		add	r0, sp, #4
 2764              	.LVL275:
 653:nanopb/pb_encode.c ****     {
 2765              		.loc 1 653 10 view .LVU751
 2766 0018 FFF7FEFF 		bl	pb_encode
 2767              	.LVL276:
 653:nanopb/pb_encode.c ****     {
 2768              		.loc 1 653 8 view .LVU752
 2769 001c 28B9     		cbnz	r0, .L271
 2770 001e 0346     		mov	r3, r0
 656:nanopb/pb_encode.c **** #endif
 2771              		.loc 1 656 9 is_stmt 1 view .LVU753
 656:nanopb/pb_encode.c **** #endif
 2772              		.loc 1 656 35 is_stmt 0 view .LVU754
 2773 0020 059A     		ldr	r2, [sp, #20]
 656:nanopb/pb_encode.c **** #endif
 2774              		.loc 1 656 24 view .LVU755
 2775 0022 2261     		str	r2, [r4, #16]
 658:nanopb/pb_encode.c ****     }
 2776              		.loc 1 658 9 is_stmt 1 view .LVU756
 2777              	.L272:
 694:nanopb/pb_encode.c **** 
 2778              		.loc 1 694 1 is_stmt 0 view .LVU757
 2779 0024 1846     		mov	r0, r3
 2780 0026 07B0     		add	sp, sp, #28
 2781              	.LCFI56:
 2782              		.cfi_remember_state
 2783              		.cfi_def_cfa_offset 20
 2784              		@ sp needed
 2785 0028 F0BD     		pop	{r4, r5, r6, r7, pc}
 2786              	.LVL277:
 2787              	.L271:
 2788              	.LCFI57:
 2789              		.cfi_restore_state
 661:nanopb/pb_encode.c ****     
 2790              		.loc 1 661 5 is_stmt 1 view .LVU758
 661:nanopb/pb_encode.c ****     
 2791              		.loc 1 661 10 is_stmt 0 view .LVU759
 2792 002a 049D     		ldr	r5, [sp, #16]
 2793              	.LVL278:
 663:nanopb/pb_encode.c ****         return false;
 2794              		.loc 1 663 5 is_stmt 1 view .LVU760
 663:nanopb/pb_encode.c ****         return false;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 75


 2795              		.loc 1 663 10 is_stmt 0 view .LVU761
 2796 002c 2A46     		mov	r2, r5
 2797 002e 0023     		movs	r3, #0
 2798 0030 2046     		mov	r0, r4
 2799 0032 FFF7FEFF 		bl	pb_encode_varint
 2800              	.LVL279:
 663:nanopb/pb_encode.c ****         return false;
 2801              		.loc 1 663 8 view .LVU762
 2802 0036 0346     		mov	r3, r0
 2803 0038 0028     		cmp	r0, #0
 2804 003a F3D0     		beq	.L272
 666:nanopb/pb_encode.c ****         return pb_write(stream, NULL, size); /* Just sizing */
 2805              		.loc 1 666 5 is_stmt 1 view .LVU763
 666:nanopb/pb_encode.c ****         return pb_write(stream, NULL, size); /* Just sizing */
 2806              		.loc 1 666 15 is_stmt 0 view .LVU764
 2807 003c 2268     		ldr	r2, [r4]
 666:nanopb/pb_encode.c ****         return pb_write(stream, NULL, size); /* Just sizing */
 2808              		.loc 1 666 8 view .LVU765
 2809 003e 4AB1     		cbz	r2, .L278
 669:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "stream full");
 2810              		.loc 1 669 5 is_stmt 1 view .LVU766
 669:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "stream full");
 2811              		.loc 1 669 15 is_stmt 0 view .LVU767
 2812 0040 E368     		ldr	r3, [r4, #12]
 669:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "stream full");
 2813              		.loc 1 669 31 view .LVU768
 2814 0042 2B44     		add	r3, r3, r5
 669:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "stream full");
 2815              		.loc 1 669 46 view .LVU769
 2816 0044 A168     		ldr	r1, [r4, #8]
 669:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "stream full");
 2817              		.loc 1 669 8 view .LVU770
 2818 0046 8B42     		cmp	r3, r1
 2819 0048 0DD9     		bls	.L274
 670:nanopb/pb_encode.c ****         
 2820              		.loc 1 670 9 is_stmt 1 view .LVU771
 2821 004a 2369     		ldr	r3, [r4, #16]
 2822 004c 4BB1     		cbz	r3, .L279
 2823              	.L275:
 670:nanopb/pb_encode.c ****         
 2824              		.loc 1 670 9 is_stmt 0 discriminator 4 view .LVU772
 2825 004e 2361     		str	r3, [r4, #16]
 2826 0050 0023     		movs	r3, #0
 2827 0052 E7E7     		b	.L272
 2828              	.L278:
 667:nanopb/pb_encode.c ****     
 2829              		.loc 1 667 9 is_stmt 1 view .LVU773
 667:nanopb/pb_encode.c ****     
 2830              		.loc 1 667 16 is_stmt 0 view .LVU774
 2831 0054 2A46     		mov	r2, r5
 2832 0056 0021     		movs	r1, #0
 2833 0058 2046     		mov	r0, r4
 2834 005a FFF7FEFF 		bl	pb_write
 2835              	.LVL280:
 2836 005e 0346     		mov	r3, r0
 2837 0060 E0E7     		b	.L272
 2838              	.L279:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 76


 670:nanopb/pb_encode.c ****         
 2839              		.loc 1 670 9 view .LVU775
 2840 0062 0F4B     		ldr	r3, .L281
 2841 0064 F3E7     		b	.L275
 2842              	.L274:
 674:nanopb/pb_encode.c ****     substream.state = stream->state;
 2843              		.loc 1 674 5 is_stmt 1 view .LVU776
 674:nanopb/pb_encode.c ****     substream.state = stream->state;
 2844              		.loc 1 674 24 is_stmt 0 view .LVU777
 2845 0066 0192     		str	r2, [sp, #4]
 675:nanopb/pb_encode.c ****     substream.max_size = size;
 2846              		.loc 1 675 5 is_stmt 1 view .LVU778
 675:nanopb/pb_encode.c ****     substream.max_size = size;
 2847              		.loc 1 675 29 is_stmt 0 view .LVU779
 2848 0068 6368     		ldr	r3, [r4, #4]
 675:nanopb/pb_encode.c ****     substream.max_size = size;
 2849              		.loc 1 675 21 view .LVU780
 2850 006a 0293     		str	r3, [sp, #8]
 676:nanopb/pb_encode.c ****     substream.bytes_written = 0;
 2851              		.loc 1 676 5 is_stmt 1 view .LVU781
 676:nanopb/pb_encode.c ****     substream.bytes_written = 0;
 2852              		.loc 1 676 24 is_stmt 0 view .LVU782
 2853 006c 0395     		str	r5, [sp, #12]
 677:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 2854              		.loc 1 677 5 is_stmt 1 view .LVU783
 677:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 2855              		.loc 1 677 29 is_stmt 0 view .LVU784
 2856 006e 0023     		movs	r3, #0
 2857 0070 0493     		str	r3, [sp, #16]
 679:nanopb/pb_encode.c **** #endif
 2858              		.loc 1 679 5 is_stmt 1 view .LVU785
 679:nanopb/pb_encode.c **** #endif
 2859              		.loc 1 679 22 is_stmt 0 view .LVU786
 2860 0072 0593     		str	r3, [sp, #20]
 682:nanopb/pb_encode.c ****     
 2861              		.loc 1 682 5 is_stmt 1 view .LVU787
 682:nanopb/pb_encode.c ****     
 2862              		.loc 1 682 14 is_stmt 0 view .LVU788
 2863 0074 3A46     		mov	r2, r7
 2864 0076 3146     		mov	r1, r6
 2865 0078 01A8     		add	r0, sp, #4
 2866 007a FFF7FEFF 		bl	pb_encode
 2867              	.LVL281:
 2868 007e 0346     		mov	r3, r0
 2869              	.LVL282:
 684:nanopb/pb_encode.c ****     stream->state = substream.state;
 2870              		.loc 1 684 5 is_stmt 1 view .LVU789
 684:nanopb/pb_encode.c ****     stream->state = substream.state;
 2871              		.loc 1 684 39 is_stmt 0 view .LVU790
 2872 0080 0499     		ldr	r1, [sp, #16]
 684:nanopb/pb_encode.c ****     stream->state = substream.state;
 2873              		.loc 1 684 27 view .LVU791
 2874 0082 E268     		ldr	r2, [r4, #12]
 2875 0084 0A44     		add	r2, r2, r1
 2876 0086 E260     		str	r2, [r4, #12]
 685:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 2877              		.loc 1 685 5 is_stmt 1 view .LVU792
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 77


 685:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 2878              		.loc 1 685 30 is_stmt 0 view .LVU793
 2879 0088 029A     		ldr	r2, [sp, #8]
 685:nanopb/pb_encode.c **** #ifndef PB_NO_ERRMSG
 2880              		.loc 1 685 19 view .LVU794
 2881 008a 6260     		str	r2, [r4, #4]
 687:nanopb/pb_encode.c **** #endif
 2882              		.loc 1 687 5 is_stmt 1 view .LVU795
 687:nanopb/pb_encode.c **** #endif
 2883              		.loc 1 687 31 is_stmt 0 view .LVU796
 2884 008c 059A     		ldr	r2, [sp, #20]
 687:nanopb/pb_encode.c **** #endif
 2885              		.loc 1 687 20 view .LVU797
 2886 008e 2261     		str	r2, [r4, #16]
 690:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "submsg size changed");
 2887              		.loc 1 690 5 is_stmt 1 view .LVU798
 690:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "submsg size changed");
 2888              		.loc 1 690 8 is_stmt 0 view .LVU799
 2889 0090 A942     		cmp	r1, r5
 2890 0092 C7D0     		beq	.L272
 691:nanopb/pb_encode.c ****     
 2891              		.loc 1 691 9 is_stmt 1 view .LVU800
 2892 0094 12B1     		cbz	r2, .L280
 2893              	.L276:
 691:nanopb/pb_encode.c ****     
 2894              		.loc 1 691 9 is_stmt 0 discriminator 4 view .LVU801
 2895 0096 2261     		str	r2, [r4, #16]
 2896 0098 0023     		movs	r3, #0
 2897              	.LVL283:
 691:nanopb/pb_encode.c ****     
 2898              		.loc 1 691 9 discriminator 4 view .LVU802
 2899 009a C3E7     		b	.L272
 2900              	.LVL284:
 2901              	.L280:
 691:nanopb/pb_encode.c ****     
 2902              		.loc 1 691 9 view .LVU803
 2903 009c 014A     		ldr	r2, .L281+4
 2904 009e FAE7     		b	.L276
 2905              	.L282:
 2906              		.align	2
 2907              	.L281:
 2908 00a0 00000000 		.word	.LC1
 2909 00a4 00000000 		.word	.LC8
 2910              		.cfi_endproc
 2911              	.LFE22:
 2913              		.section	.text.pb_enc_submessage,"ax",%progbits
 2914              		.align	1
 2915              		.syntax unified
 2916              		.thumb
 2917              		.thumb_func
 2918              		.fpu softvfp
 2920              	pb_enc_submessage:
 2921              	.LVL285:
 2922              	.LFB30:
 817:nanopb/pb_encode.c ****     if (field->ptr == NULL)
 2923              		.loc 1 817 1 is_stmt 1 view -0
 2924              		.cfi_startproc
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 78


 2925              		@ args = 0, pretend = 0, frame = 0
 2926              		@ frame_needed = 0, uses_anonymous_args = 0
 817:nanopb/pb_encode.c ****     if (field->ptr == NULL)
 2927              		.loc 1 817 1 is_stmt 0 view .LVU805
 2928 0000 08B5     		push	{r3, lr}
 2929              	.LCFI58:
 2930              		.cfi_def_cfa_offset 8
 2931              		.cfi_offset 3, -8
 2932              		.cfi_offset 14, -4
 818:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid field descriptor");
 2933              		.loc 1 818 5 is_stmt 1 view .LVU806
 818:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid field descriptor");
 2934              		.loc 1 818 14 is_stmt 0 view .LVU807
 2935 0002 D1F80610 		ldr	r1, [r1, #6]	@ unaligned
 2936              	.LVL286:
 818:nanopb/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid field descriptor");
 2937              		.loc 1 818 8 view .LVU808
 2938 0006 11B1     		cbz	r1, .L288
 821:nanopb/pb_encode.c **** }
 2939              		.loc 1 821 5 is_stmt 1 view .LVU809
 821:nanopb/pb_encode.c **** }
 2940              		.loc 1 821 12 is_stmt 0 view .LVU810
 2941 0008 FFF7FEFF 		bl	pb_encode_submessage
 2942              	.LVL287:
 2943              	.L286:
 822:nanopb/pb_encode.c **** 
 2944              		.loc 1 822 1 view .LVU811
 2945 000c 08BD     		pop	{r3, pc}
 2946              	.LVL288:
 2947              	.L288:
 819:nanopb/pb_encode.c ****     
 2948              		.loc 1 819 9 is_stmt 1 view .LVU812
 2949 000e 0369     		ldr	r3, [r0, #16]
 2950 0010 13B1     		cbz	r3, .L289
 2951              	.L285:
 819:nanopb/pb_encode.c ****     
 2952              		.loc 1 819 9 is_stmt 0 discriminator 4 view .LVU813
 2953 0012 0361     		str	r3, [r0, #16]
 2954 0014 0020     		movs	r0, #0
 2955              	.LVL289:
 819:nanopb/pb_encode.c ****     
 2956              		.loc 1 819 9 discriminator 4 view .LVU814
 2957 0016 F9E7     		b	.L286
 2958              	.LVL290:
 2959              	.L289:
 819:nanopb/pb_encode.c ****     
 2960              		.loc 1 819 9 view .LVU815
 2961 0018 004B     		ldr	r3, .L290
 2962 001a FAE7     		b	.L285
 2963              	.L291:
 2964              		.align	2
 2965              	.L290:
 2966 001c 00000000 		.word	.LC9
 2967              		.cfi_endproc
 2968              	.LFE30:
 2970              		.section	.text.pb_encode_delimited,"ax",%progbits
 2971              		.align	1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 79


 2972              		.global	pb_encode_delimited
 2973              		.syntax unified
 2974              		.thumb
 2975              		.thumb_func
 2976              		.fpu softvfp
 2978              	pb_encode_delimited:
 2979              	.LVL291:
 2980              	.LFB12:
 510:nanopb/pb_encode.c ****     return pb_encode_submessage(stream, fields, src_struct);
 2981              		.loc 1 510 1 is_stmt 1 view -0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
 510:nanopb/pb_encode.c ****     return pb_encode_submessage(stream, fields, src_struct);
 2985              		.loc 1 510 1 is_stmt 0 view .LVU817
 2986 0000 08B5     		push	{r3, lr}
 2987              	.LCFI59:
 2988              		.cfi_def_cfa_offset 8
 2989              		.cfi_offset 3, -8
 2990              		.cfi_offset 14, -4
 511:nanopb/pb_encode.c **** }
 2991              		.loc 1 511 5 is_stmt 1 view .LVU818
 511:nanopb/pb_encode.c **** }
 2992              		.loc 1 511 12 is_stmt 0 view .LVU819
 2993 0002 FFF7FEFF 		bl	pb_encode_submessage
 2994              	.LVL292:
 512:nanopb/pb_encode.c **** 
 2995              		.loc 1 512 1 view .LVU820
 2996 0006 08BD     		pop	{r3, pc}
 2997              		.cfi_endproc
 2998              	.LFE12:
 3000              		.section	.rodata.PB_ENCODERS,"a"
 3001              		.align	2
 3002              		.set	.LANCHOR0,. + 0
 3005              	PB_ENCODERS:
 3006 0000 00000000 		.word	pb_enc_varint
 3007 0004 00000000 		.word	pb_enc_uvarint
 3008 0008 00000000 		.word	pb_enc_svarint
 3009 000c 00000000 		.word	pb_enc_fixed32
 3010 0010 00000000 		.word	pb_enc_fixed64
 3011 0014 00000000 		.word	pb_enc_bytes
 3012 0018 00000000 		.word	pb_enc_string
 3013 001c 00000000 		.word	pb_enc_submessage
 3014 0020 00000000 		.word	0
 3015 0024 00000000 		.word	pb_enc_fixed_length_bytes
 3016              		.section	.rodata.encode_array.str1.4,"aMS",%progbits,1
 3017              		.align	2
 3018              	.LC5:
 3019 0000 61727261 		.ascii	"array max size exceeded\000"
 3019      79206D61 
 3019      78207369 
 3019      7A652065 
 3019      78636565 
 3020              		.section	.rodata.encode_basic_field.str1.4,"aMS",%progbits,1
 3021              		.align	2
 3022              	.LC6:
 3023 0000 6D697373 		.ascii	"missing required field\000"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 80


 3023      696E6720 
 3023      72657175 
 3023      69726564 
 3023      20666965 
 3024              		.section	.rodata.encode_callback_field.str1.4,"aMS",%progbits,1
 3025              		.align	2
 3026              	.LC0:
 3027 0000 63616C6C 		.ascii	"callback error\000"
 3027      6261636B 
 3027      20657272 
 3027      6F7200
 3028              		.section	.rodata.pb_enc_bytes.str1.4,"aMS",%progbits,1
 3029              		.align	2
 3030              	.LC7:
 3031 0000 62797465 		.ascii	"bytes size exceeded\000"
 3031      73207369 
 3031      7A652065 
 3031      78636565 
 3031      64656400 
 3032              		.section	.rodata.pb_enc_submessage.str1.4,"aMS",%progbits,1
 3033              		.align	2
 3034              	.LC9:
 3035 0000 696E7661 		.ascii	"invalid field descriptor\000"
 3035      6C696420 
 3035      6669656C 
 3035      64206465 
 3035      73637269 
 3036              		.section	.rodata.pb_enc_uvarint.str1.4,"aMS",%progbits,1
 3037              		.align	2
 3038              	.LC3:
 3039 0000 696E7661 		.ascii	"invalid data_size\000"
 3039      6C696420 
 3039      64617461 
 3039      5F73697A 
 3039      6500
 3040              		.section	.rodata.pb_encode_submessage.str1.4,"aMS",%progbits,1
 3041              		.align	2
 3042              	.LC8:
 3043 0000 7375626D 		.ascii	"submsg size changed\000"
 3043      73672073 
 3043      697A6520 
 3043      6368616E 
 3043      67656400 
 3044              		.section	.rodata.pb_encode_tag_for_field.str1.4,"aMS",%progbits,1
 3045              		.align	2
 3046              	.LC4:
 3047 0000 696E7661 		.ascii	"invalid field type\000"
 3047      6C696420 
 3047      6669656C 
 3047      64207479 
 3047      706500
 3048              		.section	.rodata.pb_write.str1.4,"aMS",%progbits,1
 3049              		.align	2
 3050              	.LC1:
 3051 0000 73747265 		.ascii	"stream full\000"
 3051      616D2066 
 3051      756C6C00 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 81


 3052              	.LC2:
 3053 000c 696F2065 		.ascii	"io error\000"
 3053      72726F72 
 3053      00
 3054              		.text
 3055              	.Letext0:
 3056              		.file 2 "c:\\users\\user\\appdata\\roaming\\gnumcueclipse\\armembeddedgcc\\arm-none-eabi\\include\
 3057              		.file 3 "c:\\users\\user\\appdata\\roaming\\gnumcueclipse\\armembeddedgcc\\arm-none-eabi\\include\
 3058              		.file 4 "c:\\users\\user\\appdata\\roaming\\gnumcueclipse\\armembeddedgcc\\arm-none-eabi\\include\
 3059              		.file 5 "c:\\users\\user\\appdata\\roaming\\gnumcueclipse\\armembeddedgcc\\lib\\gcc\\arm-none-eabi
 3060              		.file 6 "c:\\users\\user\\appdata\\roaming\\gnumcueclipse\\armembeddedgcc\\arm-none-eabi\\include\
 3061              		.file 7 "c:\\users\\user\\appdata\\roaming\\gnumcueclipse\\armembeddedgcc\\arm-none-eabi\\include\
 3062              		.file 8 "c:\\users\\user\\appdata\\roaming\\gnumcueclipse\\armembeddedgcc\\arm-none-eabi\\include\
 3063              		.file 9 "nanopb/pb.h"
 3064              		.file 10 "nanopb/pb_encode.h"
 3065              		.file 11 "nanopb/pb_common.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 82


DEFINED SYMBOLS
                            *ABS*:0000000000000000 pb_encode.c
C:\Users\User\AppData\Local\Temp\ccourbbb.s:16     .text.buf_write:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:23     .text.buf_write:0000000000000000 buf_write
C:\Users\User\AppData\Local\Temp\ccourbbb.s:81     .text.encode_callback_field:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:87     .text.encode_callback_field:0000000000000000 encode_callback_field
C:\Users\User\AppData\Local\Temp\ccourbbb.s:149    .text.encode_callback_field:0000000000000028 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:154    .text.pb_const_cast:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:160    .text.pb_const_cast:0000000000000000 pb_const_cast
C:\Users\User\AppData\Local\Temp\ccourbbb.s:177    .text.pb_check_proto3_default_value:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:183    .text.pb_check_proto3_default_value:0000000000000000 pb_check_proto3_default_value
C:\Users\User\AppData\Local\Temp\ccourbbb.s:418    .text.pb_ostream_from_buffer:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:425    .text.pb_ostream_from_buffer:0000000000000000 pb_ostream_from_buffer
C:\Users\User\AppData\Local\Temp\ccourbbb.s:468    .text.pb_ostream_from_buffer:0000000000000014 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:473    .text.pb_write:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:480    .text.pb_write:0000000000000000 pb_write
C:\Users\User\AppData\Local\Temp\ccourbbb.s:566    .text.pb_write:0000000000000044 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:572    .text.pb_encode_varint:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:579    .text.pb_encode_varint:0000000000000000 pb_encode_varint
C:\Users\User\AppData\Local\Temp\ccourbbb.s:682    .text.pb_enc_uvarint:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:688    .text.pb_enc_uvarint:0000000000000000 pb_enc_uvarint
C:\Users\User\AppData\Local\Temp\ccourbbb.s:786    .text.pb_enc_uvarint:000000000000003c $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:791    .text.pb_enc_varint:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:797    .text.pb_enc_varint:0000000000000000 pb_enc_varint
C:\Users\User\AppData\Local\Temp\ccourbbb.s:895    .text.pb_enc_varint:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:900    .text.pb_encode_svarint:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:907    .text.pb_encode_svarint:0000000000000000 pb_encode_svarint
C:\Users\User\AppData\Local\Temp\ccourbbb.s:959    .text.pb_enc_svarint:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:965    .text.pb_enc_svarint:0000000000000000 pb_enc_svarint
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1063   .text.pb_enc_svarint:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1068   .text.pb_encode_fixed32:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1075   .text.pb_encode_fixed32:0000000000000000 pb_encode_fixed32
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1132   .text.pb_enc_fixed32:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1138   .text.pb_enc_fixed32:0000000000000000 pb_enc_fixed32
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1165   .text.pb_encode_fixed64:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1172   .text.pb_encode_fixed64:0000000000000000 pb_encode_fixed64
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1247   .text.pb_enc_fixed64:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1253   .text.pb_enc_fixed64:0000000000000000 pb_enc_fixed64
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1280   .text.pb_encode_tag:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1287   .text.pb_encode_tag:0000000000000000 pb_encode_tag
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1319   .text.pb_encode_tag_for_field:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1326   .text.pb_encode_tag_for_field:0000000000000000 pb_encode_tag_for_field
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1349   .text.pb_encode_tag_for_field:0000000000000010 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1359   .text.pb_encode_tag_for_field:000000000000001a $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1416   .text.pb_encode_tag_for_field:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1421   .text.encode_array:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1427   .text.encode_array:0000000000000000 encode_array
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1738   .text.encode_array:0000000000000130 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1743   .text.encode_basic_field:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:1749   .text.encode_basic_field:0000000000000000 encode_basic_field
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2005   .text.encode_basic_field:0000000000000108 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2012   .text.encode_field:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2018   .text.encode_field:0000000000000000 encode_field
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2076   .text.encode_field:000000000000002c $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2081   .text.default_extension_encoder:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2087   .text.default_extension_encoder:0000000000000000 default_extension_encoder
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2139   .text.encode_extension_field:0000000000000000 $t
ARM GAS  C:\Users\User\AppData\Local\Temp\ccourbbb.s 			page 83


C:\Users\User\AppData\Local\Temp\ccourbbb.s:2145   .text.encode_extension_field:0000000000000000 encode_extension_field
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2223   .text.pb_encode:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2230   .text.pb_encode:0000000000000000 pb_encode
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2329   .text.pb_encode_nullterminated:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2336   .text.pb_encode_nullterminated:0000000000000000 pb_encode_nullterminated
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2390   .text.pb_get_encoded_size:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2397   .text.pb_get_encoded_size:0000000000000000 pb_get_encoded_size
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2451   .text.pb_encode_string:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2458   .text.pb_encode_string:0000000000000000 pb_encode_string
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2503   .text.pb_enc_fixed_length_bytes:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2509   .text.pb_enc_fixed_length_bytes:0000000000000000 pb_enc_fixed_length_bytes
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2539   .text.pb_enc_string:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2545   .text.pb_enc_string:0000000000000000 pb_enc_string
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2631   .text.pb_enc_bytes:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2637   .text.pb_enc_bytes:0000000000000000 pb_enc_bytes
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2717   .text.pb_enc_bytes:000000000000003c $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2722   .text.pb_encode_submessage:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2729   .text.pb_encode_submessage:0000000000000000 pb_encode_submessage
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2908   .text.pb_encode_submessage:00000000000000a0 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2914   .text.pb_enc_submessage:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2920   .text.pb_enc_submessage:0000000000000000 pb_enc_submessage
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2966   .text.pb_enc_submessage:000000000000001c $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2971   .text.pb_encode_delimited:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccourbbb.s:2978   .text.pb_encode_delimited:0000000000000000 pb_encode_delimited
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3001   .rodata.PB_ENCODERS:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3005   .rodata.PB_ENCODERS:0000000000000000 PB_ENCODERS
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3017   .rodata.encode_array.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3021   .rodata.encode_basic_field.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3025   .rodata.encode_callback_field.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3029   .rodata.pb_enc_bytes.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3033   .rodata.pb_enc_submessage.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3037   .rodata.pb_enc_uvarint.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3041   .rodata.pb_encode_submessage.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3045   .rodata.pb_encode_tag_for_field.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccourbbb.s:3049   .rodata.pb_write.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
pb_field_iter_begin
pb_field_iter_next
